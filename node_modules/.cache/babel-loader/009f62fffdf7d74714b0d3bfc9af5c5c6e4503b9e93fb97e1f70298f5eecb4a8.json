{"ast":null,"code":"var _jsxFileName = \"/Users/eanas.v/Desktop/DESC-Projects/2023/DB-managmnt-app/dashboard/src/pages/Tabs/tab3/Chart2.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport DropDown from \"../../../components/dropDown/DropDown\";\nimport LineChart from \"../../../components/Graph/lineChart/LineChart\";\nimport { getHttp } from \"../../../service/APIRequest\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chart2 = _ref => {\n  _s();\n  let {\n    startDate,\n    endDate,\n    entityListForDropDown\n  } = _ref;\n  const [selectList1Entity, setSelectList1Entity] = useState(entityListForDropDown);\n  const [selectList2Entity, setSelectList2Entity] = useState(entityListForDropDown);\n  const [chartData, setchartData] = useState([null, null]);\n  const [xAxis, setxAxis] = useState([]);\n  const [dateRangeProps, setdateRangeProps] = useState({\n    fromDate: startDate,\n    toDate: endDate\n  });\n  useEffect(() => {\n    getScoreOfSelectedEntity(\"none\");\n    setSelectList1Entity(entityListForDropDown);\n    setSelectList2Entity(entityListForDropDown);\n  }, [startDate, endDate, dateRangeProps]);\n  useEffect(() => {\n    setSelectList1Entity(entityListForDropDown);\n    setSelectList2Entity(entityListForDropDown);\n  }, [entityListForDropDown]);\n\n  // const getEntityList = async () => {\n  //   const response = await getHttp(\"entity/getAll\");\n  //   await setSelectList1Entity(response);\n  //   await setSelectList2Entity(response);\n  //   //setentityListForDropDown(response);\n  // };\n\n  function handleChange1Value(selectedOption) {\n    getScoreOfSelectedEntity(selectedOption.label, 1);\n  }\n  function handleChange2Value(selectedOption) {\n    getScoreOfSelectedEntity(selectedOption.label, 2);\n  }\n  async function drawChart(responseData, place) {\n    console.log(place);\n    var dataOfOneChart = {\n      name: responseData[0].companyName,\n      data: responseData[0].monthlyAverages.map(monthlyAverage => {\n        return monthlyAverage.averageScore;\n      })\n    };\n    var xAxisdata = responseData[0].monthlyAverages.map(monthlyAverage => {\n      return monthlyAverage.month;\n    });\n    setxAxis(xAxisdata);\n    //setchartData((prevState) => [...prevState, dataOfOneChart]);\n    if (place == 1) {\n      setchartData(prevState => [dataOfOneChart, chartData[1]]);\n    } else if (place == 2) {\n      setchartData(prevState => [chartData[0], dataOfOneChart]);\n    }\n  }\n  const getScoreOfSelectedEntity = async (entityName, place) => {\n    if (entityName) {\n      const response = await getHttp(\"skills/averageScoreOfEntity\", {\n        startDate: startDate,\n        endDate: endDate,\n        entityName: entityName\n      });\n      drawChart(response, place);\n    } else {\n      //drawChart();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"drop-down-tab3\",\n      children: [/*#__PURE__*/_jsxDEV(DropDown, {\n        mainList: selectList1Entity,\n        name: \"First Entity\",\n        onChangeDropDownItem: handleChange1Value,\n        isMulti: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DropDown, {\n        mainList: selectList2Entity,\n        name: \"Second Entity\",\n        onChangeDropDownItem: handleChange2Value,\n        isMulti: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LineChart, {\n      data: chartData,\n      xAxis: xAxis,\n      title: \"Compare 2 entities\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s(Chart2, \"uEBLnAppUavrgsbF1Hb83zONG4s=\");\n_c = Chart2;\nexport default Chart2;\nvar _c;\n$RefreshReg$(_c, \"Chart2\");","map":{"version":3,"names":["React","useEffect","useState","DropDown","LineChart","getHttp","Chart2","startDate","endDate","entityListForDropDown","selectList1Entity","setSelectList1Entity","selectList2Entity","setSelectList2Entity","chartData","setchartData","xAxis","setxAxis","dateRangeProps","setdateRangeProps","fromDate","toDate","getScoreOfSelectedEntity","handleChange1Value","selectedOption","label","handleChange2Value","drawChart","responseData","place","console","log","dataOfOneChart","name","companyName","data","monthlyAverages","map","monthlyAverage","averageScore","xAxisdata","month","prevState","entityName","response"],"sources":["/Users/eanas.v/Desktop/DESC-Projects/2023/DB-managmnt-app/dashboard/src/pages/Tabs/tab3/Chart2.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport DropDown from \"../../../components/dropDown/DropDown\";\nimport LineChart from \"../../../components/Graph/lineChart/LineChart\";\nimport { getHttp } from \"../../../service/APIRequest\";\n\ninterface Chart2Props {\n  startDate: any;\n  endDate: any;\n  entityListForDropDown: any;\n}\nconst Chart2: React.FC<Chart2Props> = ({\n  startDate,\n  endDate,\n  entityListForDropDown,\n}) => {\n  const [selectList1Entity, setSelectList1Entity] = useState(\n    entityListForDropDown\n  );\n  const [selectList2Entity, setSelectList2Entity] = useState(\n    entityListForDropDown\n  );\n  const [chartData, setchartData] = useState([null, null]);\n  const [xAxis, setxAxis] = useState([]);\n  const [dateRangeProps, setdateRangeProps] = useState({\n    fromDate: startDate,\n    toDate: endDate,\n  });\n  useEffect(() => {\n    getScoreOfSelectedEntity(\"none\");\n    setSelectList1Entity(entityListForDropDown);\n    setSelectList2Entity(entityListForDropDown);\n  }, [startDate, endDate, dateRangeProps]);\n\n  useEffect(() => {\n    setSelectList1Entity(entityListForDropDown);\n    setSelectList2Entity(entityListForDropDown);\n  }, [entityListForDropDown]);\n\n  // const getEntityList = async () => {\n  //   const response = await getHttp(\"entity/getAll\");\n  //   await setSelectList1Entity(response);\n  //   await setSelectList2Entity(response);\n  //   //setentityListForDropDown(response);\n  // };\n\n  function handleChange1Value(selectedOption) {\n    getScoreOfSelectedEntity(selectedOption.label, 1);\n  }\n\n  function handleChange2Value(selectedOption) {\n    getScoreOfSelectedEntity(selectedOption.label, 2);\n  }\n\n  async function drawChart(responseData?, place?) {\n    console.log(place);\n    var dataOfOneChart = {\n      name: responseData[0].companyName,\n      data: responseData[0].monthlyAverages.map((monthlyAverage) => {\n        return monthlyAverage.averageScore;\n      }),\n    };\n    var xAxisdata = responseData[0].monthlyAverages.map((monthlyAverage) => {\n      return monthlyAverage.month;\n    });\n    setxAxis(xAxisdata);\n    //setchartData((prevState) => [...prevState, dataOfOneChart]);\n    if (place == 1) {\n      setchartData((prevState) => [dataOfOneChart, chartData[1]]);\n    } else if (place == 2) {\n      setchartData((prevState) => [chartData[0], dataOfOneChart]);\n    }\n  }\n\n  const getScoreOfSelectedEntity = async (entityName, place?) => {\n    if (entityName) {\n      const response = await getHttp(\"skills/averageScoreOfEntity\", {\n        startDate: startDate,\n        endDate: endDate,\n        entityName: entityName,\n      });\n      drawChart(response, place);\n    } else {\n      //drawChart();\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"drop-down-tab3\">\n        <DropDown\n          mainList={selectList1Entity}\n          name=\"First Entity\"\n          onChangeDropDownItem={handleChange1Value}\n          isMulti={false}\n        />\n        <DropDown\n          mainList={selectList2Entity}\n          name=\"Second Entity\"\n          onChangeDropDownItem={handleChange2Value}\n          isMulti={false}\n        />\n      </div>\n      <LineChart data={chartData} xAxis={xAxis} title=\"Compare 2 entities\" />\n    </div>\n  );\n};\n\nexport default Chart2;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}