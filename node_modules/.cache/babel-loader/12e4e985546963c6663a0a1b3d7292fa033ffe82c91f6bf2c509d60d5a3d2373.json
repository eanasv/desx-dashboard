{"ast":null,"code":"var _jsxFileName = \"/Users/eanas.v/Desktop/DESC-Projects/2023/DB-managmnt-app/dashboard/src/pages/Tabs/tab3/Chart3.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { getHttp } from \"../../../service/APIRequest\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Chart3 = _ref => {\n  _s();\n  let {\n    startDate,\n    endDate\n  } = _ref;\n  const [chartData, setchartData] = useState([]);\n  const [xAxis, setxAxis] = useState([]);\n  const [dateRangeProps, setdateRangeProps] = useState({\n    fromDate: startDate,\n    toDate: endDate\n  });\n  const [options, setOptions] = useState({\n    chart: {\n      id: \"bar-chart\"\n    },\n    xaxis: {\n      categories: chartData === null || chartData === void 0 ? void 0 : chartData.map(company => company.entityName)\n    },\n    plotOptions: {\n      bar: {\n        colors: {\n          ranges: [{\n            from: -100,\n            to: 0,\n            color: \"#b70849\"\n          }, {\n            from: 0,\n            to: 100,\n            color: \"#1034a6\"\n          }]\n        }\n      }\n    },\n    dataLabels: {\n      enabled: true,\n      formatter: function (val, opts) {\n        const isPositive = val >= 0;\n        return isPositive ? `+${val}` : val.toString();\n      }\n    }\n  });\n  console.log(endDate, startDate, chartData);\n  useEffect(() => {\n    getScoreOfSelectedEntity(startDate, endDate);\n    //setchartData(data);\n    setdateRangeProps({\n      fromDate: startDate,\n      toDate: endDate\n    });\n  }, [startDate, endDate]);\n  const getScoreOfSelectedEntity = async (startDate, endDate) => {\n    const response = await getHttp(\"skills/skill-ranks\", {\n      startDate: dateRangeProps.fromDate,\n      endDate: dateRangeProps.toDate\n    });\n    console.log(response);\n    drawChart(response);\n  };\n  async function drawChart(responseData) {\n    console.log(\"==------====\", responseData === null || responseData === void 0 ? void 0 : responseData.map(company => company.avg_score_diff));\n    var dataOfChart = {\n      name: \"Improvement over last year\",\n      //chartData?.map((company) => company.entityName),\n      data: responseData === null || responseData === void 0 ? void 0 : responseData.map(company => company.avg_score_diff)\n    };\n    //   name: responseData[0].companyName,\n    //   data: responseData[0].monthlyAverages.map((monthlyAverage) => {\n    //     return monthlyAverage.averageScore;\n    //   }),\n    // };\n    var xAxisdata = responseData === null || responseData === void 0 ? void 0 : responseData.map(company => company.entityName);\n    setxAxis(xAxisdata);\n    //setchartData(dataOfChart);\n    // setchartData((prevState) => [...prevState, dataOfChart]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Chart3\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 10\n  }, this);\n};\n_s(Chart3, \"+v7DGzuZEk5WNQhSNkdxONGfvuY=\");\n_c = Chart3;\nvar _c;\n$RefreshReg$(_c, \"Chart3\");","map":{"version":3,"names":["React","useEffect","useState","getHttp","Chart3","startDate","endDate","chartData","setchartData","xAxis","setxAxis","dateRangeProps","setdateRangeProps","fromDate","toDate","options","setOptions","chart","id","xaxis","categories","map","company","entityName","plotOptions","bar","colors","ranges","from","to","color","dataLabels","enabled","formatter","val","opts","isPositive","toString","console","log","getScoreOfSelectedEntity","response","drawChart","responseData","avg_score_diff","dataOfChart","name","data","xAxisdata"],"sources":["/Users/eanas.v/Desktop/DESC-Projects/2023/DB-managmnt-app/dashboard/src/pages/Tabs/tab3/Chart3.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { getHttp } from \"../../../service/APIRequest\";\n\ninterface Chart3Props {\n  startDate: any;\n  endDate: any;\n  //data?: any;\n}\nexport const Chart3: React.FC<Chart3Props> = ({ startDate, endDate }) => {\n  const [chartData, setchartData] = useState([]);\n  const [xAxis, setxAxis] = useState([]);\n  const [dateRangeProps, setdateRangeProps] = useState({\n    fromDate: startDate,\n    toDate: endDate,\n  });\n\n  const [options, setOptions] = useState({\n    chart: {\n      id: \"bar-chart\",\n    },\n    xaxis: {\n      categories: chartData?.map((company) => company.entityName),\n    },\n    plotOptions: {\n      bar: {\n        colors: {\n          ranges: [\n            {\n              from: -100,\n              to: 0,\n              color: \"#b70849\",\n            },\n            {\n              from: 0,\n              to: 100,\n              color: \"#1034a6\",\n            },\n          ],\n        },\n      },\n    },\n    dataLabels: {\n      enabled: true,\n      formatter: function (val, opts) {\n        const isPositive = val >= 0;\n        return isPositive ? `+${val}` : val.toString();\n      },\n    },\n  });\n  console.log(endDate, startDate, chartData);\n\n  useEffect(() => {\n    getScoreOfSelectedEntity(startDate, endDate);\n    //setchartData(data);\n    setdateRangeProps({ fromDate: startDate, toDate: endDate });\n  }, [startDate, endDate]);\n\n  const getScoreOfSelectedEntity = async (startDate, endDate) => {\n    const response = await getHttp(\"skills/skill-ranks\", {\n      startDate: dateRangeProps.fromDate,\n      endDate: dateRangeProps.toDate,\n    });\n    console.log(response);\n    drawChart(response);\n  };\n\n  async function drawChart(responseData?) {\n    console.log(\n      \"==------====\",\n      responseData?.map((company) => company.avg_score_diff)\n    );\n\n    var dataOfChart = {\n      name: \"Improvement over last year\", //chartData?.map((company) => company.entityName),\n      data: responseData?.map((company) => company.avg_score_diff),\n    };\n    //   name: responseData[0].companyName,\n    //   data: responseData[0].monthlyAverages.map((monthlyAverage) => {\n    //     return monthlyAverage.averageScore;\n    //   }),\n    // };\n    var xAxisdata = responseData?.map((company) => company.entityName);\n    setxAxis(xAxisdata);\n    //setchartData(dataOfChart);\n    // setchartData((prevState) => [...prevState, dataOfChart]);\n  }\n\n  return <div>Chart3</div>;\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,OAAO,QAAQ,6BAA6B;AAAC;AAOtD,OAAO,MAAMC,MAA6B,GAAG,QAA4B;EAAA;EAAA,IAA3B;IAAEC,SAAS;IAAEC;EAAQ,CAAC;EAClE,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACS,cAAc,EAAEC,iBAAiB,CAAC,GAAGV,QAAQ,CAAC;IACnDW,QAAQ,EAAER,SAAS;IACnBS,MAAM,EAAER;EACV,CAAC,CAAC;EAEF,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC;IACrCe,KAAK,EAAE;MACLC,EAAE,EAAE;IACN,CAAC;IACDC,KAAK,EAAE;MACLC,UAAU,EAAEb,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEc,GAAG,CAAEC,OAAO,IAAKA,OAAO,CAACC,UAAU;IAC5D,CAAC;IACDC,WAAW,EAAE;MACXC,GAAG,EAAE;QACHC,MAAM,EAAE;UACNC,MAAM,EAAE,CACN;YACEC,IAAI,EAAE,CAAC,GAAG;YACVC,EAAE,EAAE,CAAC;YACLC,KAAK,EAAE;UACT,CAAC,EACD;YACEF,IAAI,EAAE,CAAC;YACPC,EAAE,EAAE,GAAG;YACPC,KAAK,EAAE;UACT,CAAC;QAEL;MACF;IACF,CAAC;IACDC,UAAU,EAAE;MACVC,OAAO,EAAE,IAAI;MACbC,SAAS,EAAE,UAAUC,GAAG,EAAEC,IAAI,EAAE;QAC9B,MAAMC,UAAU,GAAGF,GAAG,IAAI,CAAC;QAC3B,OAAOE,UAAU,GAAI,IAAGF,GAAI,EAAC,GAAGA,GAAG,CAACG,QAAQ,EAAE;MAChD;IACF;EACF,CAAC,CAAC;EACFC,OAAO,CAACC,GAAG,CAACjC,OAAO,EAAED,SAAS,EAAEE,SAAS,CAAC;EAE1CN,SAAS,CAAC,MAAM;IACduC,wBAAwB,CAACnC,SAAS,EAAEC,OAAO,CAAC;IAC5C;IACAM,iBAAiB,CAAC;MAAEC,QAAQ,EAAER,SAAS;MAAES,MAAM,EAAER;IAAQ,CAAC,CAAC;EAC7D,CAAC,EAAE,CAACD,SAAS,EAAEC,OAAO,CAAC,CAAC;EAExB,MAAMkC,wBAAwB,GAAG,OAAOnC,SAAS,EAAEC,OAAO,KAAK;IAC7D,MAAMmC,QAAQ,GAAG,MAAMtC,OAAO,CAAC,oBAAoB,EAAE;MACnDE,SAAS,EAAEM,cAAc,CAACE,QAAQ;MAClCP,OAAO,EAAEK,cAAc,CAACG;IAC1B,CAAC,CAAC;IACFwB,OAAO,CAACC,GAAG,CAACE,QAAQ,CAAC;IACrBC,SAAS,CAACD,QAAQ,CAAC;EACrB,CAAC;EAED,eAAeC,SAAS,CAACC,YAAa,EAAE;IACtCL,OAAO,CAACC,GAAG,CACT,cAAc,EACdI,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEtB,GAAG,CAAEC,OAAO,IAAKA,OAAO,CAACsB,cAAc,CAAC,CACvD;IAED,IAAIC,WAAW,GAAG;MAChBC,IAAI,EAAE,4BAA4B;MAAE;MACpCC,IAAI,EAAEJ,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEtB,GAAG,CAAEC,OAAO,IAAKA,OAAO,CAACsB,cAAc;IAC7D,CAAC;IACD;IACA;IACA;IACA;IACA;IACA,IAAII,SAAS,GAAGL,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEtB,GAAG,CAAEC,OAAO,IAAKA,OAAO,CAACC,UAAU,CAAC;IAClEb,QAAQ,CAACsC,SAAS,CAAC;IACnB;IACA;EACF;;EAEA,oBAAO;IAAA,UAAK;EAAM;IAAA;IAAA;IAAA;EAAA,QAAM;AAC1B,CAAC;AAAC,GAhFW5C,MAA6B;AAAA,KAA7BA,MAA6B;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}