{"ast":null,"code":"var _jsxFileName = \"/Users/eanas.v/Desktop/DESC-Projects/2023/DB-managmnt-app/dashboard/src/pages/Tabs/tab3/Chart2.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport DropDown from \"../../../components/dropDown/DropDown\";\nimport LineChart from \"../../../components/Graph/lineChart/LineChart\";\nimport { getHttp } from \"../../../service/APIRequest\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chart2 = _ref => {\n  _s();\n  let {\n    startDate,\n    endDate,\n    entityListForDropDown\n  } = _ref;\n  const [selectList1Entity, setSelectList1Entity] = useState(entityListForDropDown);\n  const [selectList2Entity, setSelectList2Entity] = useState(entityListForDropDown);\n  const [chartData, setchartData] = useState(new Array(2));\n  const [xAxis, setxAxis] = useState([]);\n  const [dateRangeProps, setdateRangeProps] = useState({\n    fromDate: startDate,\n    toDate: endDate\n  });\n  useEffect(() => {\n    getScoreOfSelectedEntity(\"none\");\n    setSelectList1Entity(entityListForDropDown);\n    setSelectList2Entity(entityListForDropDown);\n  }, [startDate, endDate, dateRangeProps]);\n  useEffect(() => {\n    setSelectList1Entity(entityListForDropDown);\n    setSelectList2Entity(entityListForDropDown);\n  }, [entityListForDropDown]);\n\n  // const getEntityList = async () => {\n  //   const response = await getHttp(\"entity/getAll\");\n  //   await setSelectList1Entity(response);\n  //   await setSelectList2Entity(response);\n  //   //setentityListForDropDown(response);\n  // };\n\n  function handleChange1Value(selectedOption) {\n    getScoreOfSelectedEntity(selectedOption.label);\n  }\n  function handleChange2Value(selectedOption) {\n    getScoreOfSelectedEntity(selectedOption.label);\n  }\n  async function drawChart(responseData) {\n    var _responseData$, _responseData$2, _responseData$2$month, _responseData$3, _responseData$3$month;\n    console.log(responseData);\n    var dataOfOneChart = {\n      name: (_responseData$ = responseData[0]) === null || _responseData$ === void 0 ? void 0 : _responseData$.companyName,\n      data: (_responseData$2 = responseData[0]) === null || _responseData$2 === void 0 ? void 0 : (_responseData$2$month = _responseData$2.monthlyAverages) === null || _responseData$2$month === void 0 ? void 0 : _responseData$2$month.map(monthlyAverage => {\n        return monthlyAverage.averageScore;\n      })\n    };\n    var xAxisdata = (_responseData$3 = responseData[0]) === null || _responseData$3 === void 0 ? void 0 : (_responseData$3$month = _responseData$3.monthlyAverages) === null || _responseData$3$month === void 0 ? void 0 : _responseData$3$month.map(monthlyAverage => {\n      return monthlyAverage.month;\n    });\n    console.log(dataOfOneChart, xAxisdata);\n    setxAxis(xAxisdata);\n    setchartData(prevState => [...prevState, dataOfOneChart]);\n  }\n  const getScoreOfSelectedEntity = async entityName => {\n    if (entityName) {\n      const response = await getHttp(\"skills/averageScoreOfEntity\", {\n        startDate: startDate,\n        endDate: endDate,\n        entityName: entityName\n      });\n      drawChart(response);\n    } else {\n      drawChart();\n    }\n  };\n\n  // const getScoreOfSelectedEntity = async (entityName) => {\n  //   if (entityName) {\n  //     const response = await getHttp(\"skills/averageScoreOfEntity\", {\n  //       startDate: startDate,\n  //       endDate: endDate,\n  //       entityName: entityName,\n  //     });\n  //     drawChart(response);\n  //   } else {\n  //     drawChart();\n  //   }\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"drop-down-tab3\",\n      children: [/*#__PURE__*/_jsxDEV(DropDown, {\n        mainList: selectList1Entity,\n        name: \"First Entity\",\n        onChangeDropDownItem: handleChange1Value,\n        isMulti: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DropDown, {\n        mainList: selectList2Entity,\n        name: \"Second Entity\",\n        onChangeDropDownItem: handleChange2Value,\n        isMulti: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LineChart, {\n      data: chartData,\n      xAxis: xAxis\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n_s(Chart2, \"TfEvDN9gJbXqy93YI1eNCKGRGM0=\");\n_c = Chart2;\nexport default Chart2;\nvar _c;\n$RefreshReg$(_c, \"Chart2\");","map":{"version":3,"names":["React","useEffect","useState","DropDown","LineChart","getHttp","Chart2","startDate","endDate","entityListForDropDown","selectList1Entity","setSelectList1Entity","selectList2Entity","setSelectList2Entity","chartData","setchartData","Array","xAxis","setxAxis","dateRangeProps","setdateRangeProps","fromDate","toDate","getScoreOfSelectedEntity","handleChange1Value","selectedOption","label","handleChange2Value","drawChart","responseData","console","log","dataOfOneChart","name","companyName","data","monthlyAverages","map","monthlyAverage","averageScore","xAxisdata","month","prevState","entityName","response"],"sources":["/Users/eanas.v/Desktop/DESC-Projects/2023/DB-managmnt-app/dashboard/src/pages/Tabs/tab3/Chart2.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport DropDown from \"../../../components/dropDown/DropDown\";\nimport LineChart from \"../../../components/Graph/lineChart/LineChart\";\nimport { getHttp } from \"../../../service/APIRequest\";\n\ninterface Chart2Props {\n  startDate: any;\n  endDate: any;\n  entityListForDropDown: any;\n}\nconst Chart2: React.FC<Chart2Props> = ({\n  startDate,\n  endDate,\n  entityListForDropDown,\n}) => {\n  const [selectList1Entity, setSelectList1Entity] = useState(\n    entityListForDropDown\n  );\n  const [selectList2Entity, setSelectList2Entity] = useState(\n    entityListForDropDown\n  );\n  const [chartData, setchartData] = useState(new Array(2));\n  const [xAxis, setxAxis] = useState([]);\n  const [dateRangeProps, setdateRangeProps] = useState({\n    fromDate: startDate,\n    toDate: endDate,\n  });\n  useEffect(() => {\n    getScoreOfSelectedEntity(\"none\");\n    setSelectList1Entity(entityListForDropDown);\n    setSelectList2Entity(entityListForDropDown);\n  }, [startDate, endDate, dateRangeProps]);\n\n  useEffect(() => {\n    setSelectList1Entity(entityListForDropDown);\n    setSelectList2Entity(entityListForDropDown);\n  }, [entityListForDropDown]);\n\n  // const getEntityList = async () => {\n  //   const response = await getHttp(\"entity/getAll\");\n  //   await setSelectList1Entity(response);\n  //   await setSelectList2Entity(response);\n  //   //setentityListForDropDown(response);\n  // };\n\n  function handleChange1Value(selectedOption) {\n    getScoreOfSelectedEntity(selectedOption.label);\n  }\n\n  function handleChange2Value(selectedOption) {\n    getScoreOfSelectedEntity(selectedOption.label);\n  }\n\n  async function drawChart(responseData?) {\n    console.log(responseData);\n    var dataOfOneChart = {\n      name: responseData[0]?.companyName,\n      data: responseData[0]?.monthlyAverages?.map((monthlyAverage) => {\n        return monthlyAverage.averageScore;\n      }),\n    };\n    var xAxisdata = responseData[0]?.monthlyAverages?.map((monthlyAverage) => {\n      return monthlyAverage.month;\n    });\n    console.log(dataOfOneChart, xAxisdata);\n    setxAxis(xAxisdata);\n    setchartData((prevState) => [...prevState, dataOfOneChart]);\n  }\n\n  const getScoreOfSelectedEntity = async (entityName) => {\n    if (entityName) {\n      const response = await getHttp(\"skills/averageScoreOfEntity\", {\n        startDate: startDate,\n        endDate: endDate,\n        entityName: entityName,\n      });\n      drawChart(response);\n    } else {\n      drawChart();\n    }\n  };\n\n  // const getScoreOfSelectedEntity = async (entityName) => {\n  //   if (entityName) {\n  //     const response = await getHttp(\"skills/averageScoreOfEntity\", {\n  //       startDate: startDate,\n  //       endDate: endDate,\n  //       entityName: entityName,\n  //     });\n  //     drawChart(response);\n  //   } else {\n  //     drawChart();\n  //   }\n  // };\n\n  return (\n    <div>\n      <div className=\"drop-down-tab3\">\n        <DropDown\n          mainList={selectList1Entity}\n          name=\"First Entity\"\n          onChangeDropDownItem={handleChange1Value}\n          isMulti={false}\n        />\n        <DropDown\n          mainList={selectList2Entity}\n          name=\"Second Entity\"\n          onChangeDropDownItem={handleChange2Value}\n          isMulti={false}\n        />\n      </div>\n      {/* <button\n      //onClick={() => filterData(startDate, endDate)}\n       onClick={()=>getScoreOfSelectedEntity(startDate, endDate)}\n      >\n        compare Data\n      </button> */}\n      <LineChart data={chartData} xAxis={xAxis} />\n    </div>\n  );\n};\n\nexport default Chart2;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}