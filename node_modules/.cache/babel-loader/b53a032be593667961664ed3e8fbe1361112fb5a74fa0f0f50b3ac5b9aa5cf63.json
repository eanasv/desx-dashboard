{"ast":null,"code":"var _jsxFileName = \"/Users/eanas.v/Desktop/DESC-Projects/2023/DB-managmnt-app/dashboard/src/pages/Tabs/tab3/Chart3.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { BarChart } from \"../../../components/Graph/barChart/BarChart\";\nimport { getHttp } from \"../../../service/APIRequest\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Chart3 = _ref => {\n  _s();\n  let {\n    data,\n    startDate,\n    endDate\n  } = _ref;\n  const [chartData, setchartData] = useState(data);\n  const [xAxis, setxAxis] = useState([]);\n  console.log(\"startDate\", startDate, \"------end date\", endDate);\n  //const [series, setSeries] = useState<any>();\n  const [dateRangeProps, setdateRangeProps] = useState({\n    fromDate: startDate,\n    toDate: endDate\n  });\n  useEffect(() => {\n    getScoreOfSelectedEntity(startDate, endDate);\n    console.log(\"???????????????\", startDate);\n  }, [startDate, endDate]);\n  const [series, setSeries] = useState([{\n    name: \"Improvement over last year\",\n    //chartData?.map((company) => company.entityName),\n    data: chartData === null || chartData === void 0 ? void 0 : chartData.map(company => company.avg_score_diff)\n  }]);\n\n  //   const [options, setOptions] = useState({\n  //     chart: {\n  //       id: \"bar-chart\",\n  //     },\n  //     xaxis: {\n  //       categories: chartData?.map((company) => company.entityName),\n  //     },\n  //     plotOptions: {\n  //       bar: {\n  //         colors: {\n  //           ranges: [\n  //             {\n  //               from: -100,\n  //               to: 0,\n  //               color: \"#b70849\",\n  //             },\n  //             {\n  //               from: 0,\n  //               to: 100,\n  //               color: \"#1034a6\",\n  //             },\n  //           ],\n  //         },\n  //       },\n  //     },\n  //     dataLabels: {\n  //       enabled: true,\n  //       formatter: function (val, opts) {\n  //         const isPositive = val >= 0;\n  //         return isPositive ? `+${val}` : val.toString();\n  //       },\n  //     },\n  //   });\n\n  async function drawChart(responseData) {\n    console.log(\"==------====\", responseData === null || responseData === void 0 ? void 0 : responseData.map(company => company.avg_score_diff));\n    var dataOfChart = {\n      name: \"Improvement over last year\",\n      //chartData?.map((company) => company.entityName),\n      data: responseData === null || responseData === void 0 ? void 0 : responseData.map(company => company.avg_score_diff)\n    };\n    //   name: responseData[0].companyName,\n    //   data: responseData[0].monthlyAverages.map((monthlyAverage) => {\n    //     return monthlyAverage.averageScore;\n    //   }),\n    // };\n    var xAxisdata = responseData === null || responseData === void 0 ? void 0 : responseData.map(company => company.entityName);\n    setxAxis(xAxisdata);\n    setchartData(dataOfChart);\n    // setchartData((prevState) => [...prevState, dataOfChart]);\n  }\n\n  const getScoreOfSelectedEntity = async (startDate, endDate) => {\n    const response = await getHttp(\"skills/skill-ranks\", {\n      startDate: dateRangeProps.fromDate || startDate,\n      endDate: dateRangeProps.toDate || endDate\n    });\n    drawChart(response);\n  };\n\n  //   useEffect(() => {\n  //     setOptions((prevState) => ({\n  //       ...prevState,\n  //       xaxis: {\n  //         ...prevState.xaxis,\n  //         categories: data?.map((company) => company.entityName),\n  //       },\n  //     }));\n  //   }, [startDate, data]);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(BarChart, {\n      data: chartData,\n      xAxis: xAxis\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n_s(Chart3, \"Du/8HBd3+xj8odUv7PNCd2DkrzU=\");\n_c = Chart3;\nvar _c;\n$RefreshReg$(_c, \"Chart3\");","map":{"version":3,"names":["React","useEffect","useState","BarChart","getHttp","Chart3","data","startDate","endDate","chartData","setchartData","xAxis","setxAxis","console","log","dateRangeProps","setdateRangeProps","fromDate","toDate","getScoreOfSelectedEntity","series","setSeries","name","map","company","avg_score_diff","drawChart","responseData","dataOfChart","xAxisdata","entityName","response"],"sources":["/Users/eanas.v/Desktop/DESC-Projects/2023/DB-managmnt-app/dashboard/src/pages/Tabs/tab3/Chart3.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport Chart from \"react-apexcharts\";\nimport { BarChart } from \"../../../components/Graph/barChart/BarChart\";\nimport LineChart from \"../../../components/Graph/lineChart/LineChart\";\nimport { getHttp } from \"../../../service/APIRequest\";\n\ninterface Chart3Props {\n  data: any;\n  startDate: any;\n  endDate: any;\n}\n\nexport const Chart3: React.FC<Chart3Props> = ({ data, startDate, endDate }) => {\n  const [chartData, setchartData] = useState(data);\n  const [xAxis, setxAxis] = useState([]);\n  console.log(\"startDate\", startDate, \"------end date\", endDate);\n  //const [series, setSeries] = useState<any>();\n  const [dateRangeProps, setdateRangeProps] = useState({\n    fromDate: startDate,\n    toDate: endDate,\n  });\n\n  useEffect(() => {\n    getScoreOfSelectedEntity(startDate, endDate);\n    console.log(\"???????????????\", startDate);\n  }, [startDate, endDate]);\n\n  const [series, setSeries] = useState([\n    {\n      name: \"Improvement over last year\", //chartData?.map((company) => company.entityName),\n      data: chartData?.map((company) => company.avg_score_diff),\n    },\n  ]);\n\n  //   const [options, setOptions] = useState({\n  //     chart: {\n  //       id: \"bar-chart\",\n  //     },\n  //     xaxis: {\n  //       categories: chartData?.map((company) => company.entityName),\n  //     },\n  //     plotOptions: {\n  //       bar: {\n  //         colors: {\n  //           ranges: [\n  //             {\n  //               from: -100,\n  //               to: 0,\n  //               color: \"#b70849\",\n  //             },\n  //             {\n  //               from: 0,\n  //               to: 100,\n  //               color: \"#1034a6\",\n  //             },\n  //           ],\n  //         },\n  //       },\n  //     },\n  //     dataLabels: {\n  //       enabled: true,\n  //       formatter: function (val, opts) {\n  //         const isPositive = val >= 0;\n  //         return isPositive ? `+${val}` : val.toString();\n  //       },\n  //     },\n  //   });\n\n  async function drawChart(responseData?) {\n    console.log(\n      \"==------====\",\n      responseData?.map((company) => company.avg_score_diff)\n    );\n\n    var dataOfChart = {\n      name: \"Improvement over last year\", //chartData?.map((company) => company.entityName),\n      data: responseData?.map((company) => company.avg_score_diff),\n    };\n    //   name: responseData[0].companyName,\n    //   data: responseData[0].monthlyAverages.map((monthlyAverage) => {\n    //     return monthlyAverage.averageScore;\n    //   }),\n    // };\n    var xAxisdata = responseData?.map((company) => company.entityName);\n    setxAxis(xAxisdata);\n    setchartData(dataOfChart);\n    // setchartData((prevState) => [...prevState, dataOfChart]);\n  }\n\n  const getScoreOfSelectedEntity = async (startDate, endDate) => {\n    const response = await getHttp(\"skills/skill-ranks\", {\n      startDate: dateRangeProps.fromDate || startDate,\n      endDate: dateRangeProps.toDate || endDate,\n    });\n    drawChart(response);\n  };\n\n  //   useEffect(() => {\n  //     setOptions((prevState) => ({\n  //       ...prevState,\n  //       xaxis: {\n  //         ...prevState.xaxis,\n  //         categories: data?.map((company) => company.entityName),\n  //       },\n  //     }));\n  //   }, [startDate, data]);\n\n  return (\n    <div>\n      {/* <Chart options={options} series={series} type=\"bar\" height={350} /> */}\n      <BarChart data={chartData} xAxis={xAxis} />\n    </div>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}