{"ast":null,"code":"var _jsxFileName = \"/Users/eanas.v/Desktop/DESC-Projects/2023/DB-managmnt-app/dashboard/src/pages/Tabs/tab3/Chart3.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Chart from \"react-apexcharts\";\nimport { getHttp } from \"../../../service/APIRequest\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Chart3 = _ref => {\n  _s();\n  let {\n    data,\n    startDate,\n    endDate\n  } = _ref;\n  const [chartData, setchartData] = useState(data);\n  const [xAxis, setxAxis] = useState([]);\n  console.log(data, chartData);\n  //const [series, setSeries] = useState<any>();\n  const [dateRangeProps, setdateRangeProps] = useState({\n    fromDate: startDate,\n    toDate: endDate\n  });\n  useEffect(() => {\n    getScoreOfSelectedEntity();\n  }, [startDate, endDate]);\n  const [series, setSeries] = useState([{\n    name: \"Improvement over last year\",\n    //chartData?.map((company) => company.entityName),\n    data: chartData === null || chartData === void 0 ? void 0 : chartData.map(company => company.avg_score_diff)\n  }]);\n  const [options, setOptions] = useState({\n    chart: {\n      id: \"bar-chart\"\n    },\n    xaxis: {\n      categories: chartData === null || chartData === void 0 ? void 0 : chartData.map(company => company.entityName)\n    },\n    plotOptions: {\n      bar: {\n        colors: {\n          ranges: [{\n            from: -100,\n            to: 0,\n            color: \"#b70849\"\n          }, {\n            from: 0,\n            to: 100,\n            color: \"#1034a6\"\n          }]\n        }\n      }\n    },\n    dataLabels: {\n      enabled: true,\n      formatter: function (val, opts) {\n        const isPositive = val >= 0;\n        return isPositive ? `+${val}` : val.toString();\n      }\n    }\n  });\n  async function drawChart(responseData) {\n    var dataOfOneChart = {\n      name: responseData[0].companyName,\n      data: responseData[0].monthlyAverages.map(monthlyAverage => {\n        return monthlyAverage.averageScore;\n      })\n    };\n    var xAxisdata = responseData[0].monthlyAverages.map(monthlyAverage => {\n      return monthlyAverage.month;\n    });\n    setxAxis(xAxisdata);\n    setchartData(prevState => [...prevState, dataOfOneChart]);\n  }\n  const getScoreOfSelectedEntity = async () => {\n    const response = await getHttp(\"skills/skill-ranks\", {\n      startDate: startDate,\n      endDate: endDate\n    });\n    drawChart(response);\n  };\n  useEffect(() => {\n    setOptions(prevState => ({\n      ...prevState,\n      xaxis: {\n        ...prevState.xaxis,\n        categories: data === null || data === void 0 ? void 0 : data.map(company => company.entityName)\n      }\n    }));\n  }, [startDate, data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Chart, {\n      options: options,\n      series: series,\n      type: \"bar\",\n      height: 350\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_s(Chart3, \"BCd4ya9QRuY0AuQUW1tGDOGLPfs=\");\n_c = Chart3;\nvar _c;\n$RefreshReg$(_c, \"Chart3\");","map":{"version":3,"names":["React","useEffect","useState","Chart","getHttp","Chart3","data","startDate","endDate","chartData","setchartData","xAxis","setxAxis","console","log","dateRangeProps","setdateRangeProps","fromDate","toDate","getScoreOfSelectedEntity","series","setSeries","name","map","company","avg_score_diff","options","setOptions","chart","id","xaxis","categories","entityName","plotOptions","bar","colors","ranges","from","to","color","dataLabels","enabled","formatter","val","opts","isPositive","toString","drawChart","responseData","dataOfOneChart","companyName","monthlyAverages","monthlyAverage","averageScore","xAxisdata","month","prevState","response"],"sources":["/Users/eanas.v/Desktop/DESC-Projects/2023/DB-managmnt-app/dashboard/src/pages/Tabs/tab3/Chart3.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport Chart from \"react-apexcharts\";\nimport LineChart from \"../../../components/Graph/lineChart/LineChart\";\nimport { getHttp } from \"../../../service/APIRequest\";\n\ninterface Chart3Props {\n  data: any;\n  startDate: any;\n  endDate: any;\n}\n\nexport const Chart3: React.FC<Chart3Props> = ({ data, startDate, endDate }) => {\n  const [chartData, setchartData] = useState(data);\n  const [xAxis, setxAxis] = useState([]);\n  console.log(data, chartData);\n  //const [series, setSeries] = useState<any>();\n  const [dateRangeProps, setdateRangeProps] = useState({\n    fromDate: startDate,\n    toDate: endDate,\n  });\n\n  useEffect(() => {\n    getScoreOfSelectedEntity();\n  }, [startDate, endDate]);\n\n  const [series, setSeries] = useState([\n    {\n      name: \"Improvement over last year\", //chartData?.map((company) => company.entityName),\n      data: chartData?.map((company) => company.avg_score_diff),\n    },\n  ]);\n\n  const [options, setOptions] = useState({\n    chart: {\n      id: \"bar-chart\",\n    },\n    xaxis: {\n      categories: chartData?.map((company) => company.entityName),\n    },\n    plotOptions: {\n      bar: {\n        colors: {\n          ranges: [\n            {\n              from: -100,\n              to: 0,\n              color: \"#b70849\",\n            },\n            {\n              from: 0,\n              to: 100,\n              color: \"#1034a6\",\n            },\n          ],\n        },\n      },\n    },\n    dataLabels: {\n      enabled: true,\n      formatter: function (val, opts) {\n        const isPositive = val >= 0;\n        return isPositive ? `+${val}` : val.toString();\n      },\n    },\n  });\n\n  async function drawChart(responseData?) {\n    var dataOfOneChart = {\n      name: responseData[0].companyName,\n      data: responseData[0].monthlyAverages.map((monthlyAverage) => {\n        return monthlyAverage.averageScore;\n      }),\n    };\n    var xAxisdata = responseData[0].monthlyAverages.map((monthlyAverage) => {\n      return monthlyAverage.month;\n    });\n    setxAxis(xAxisdata);\n    setchartData((prevState) => [...prevState, dataOfOneChart]);\n  }\n\n  const getScoreOfSelectedEntity = async () => {\n    const response = await getHttp(\"skills/skill-ranks\", {\n      startDate: startDate,\n      endDate: endDate,\n    });\n    drawChart(response);\n  };\n\n  useEffect(() => {\n    setOptions((prevState) => ({\n      ...prevState,\n      xaxis: {\n        ...prevState.xaxis,\n        categories: data?.map((company) => company.entityName),\n      },\n    }));\n  }, [startDate, data]);\n\n  return (\n    <div>\n      <Chart options={options} series={series} type=\"bar\" height={350} />\n    </div>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}