{"ast":null,"code":"var _jsxFileName = \"/Users/eanas.v/Desktop/DESC-Projects/2023/DB-managmnt-app/dashboard/src/components/Graph/barChart/BarChart.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Chart from \"react-apexcharts\";\nimport { Popover } from \"../../popup/Popover\";\nimport \"../Chart.css\";\nimport \"./BarChartPopup.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const BarChart = _ref => {\n  _s();\n  let {\n    data,\n    xAxis,\n    title,\n    name,\n    width,\n    eachBarClicked,\n    barChartPopoverdata,\n    subTitle\n  } = _ref;\n  const [dataSeries, setdataSeries] = useState([{\n    name: title,\n    //will be displayed on the y-axis\n    data: data\n  }]);\n  const [subTitles, setsubTitles] = useState({\n    title: title,\n    subTitle: title\n  });\n  const [popupPosition, setPopupPosition] = useState(null);\n  const barRef = useRef(null);\n  const [popupData, setPopupData] = useState(barChartPopoverdata);\n  const [option, setOption] = useState({\n    legend: {\n      show: false\n    },\n    chart: {\n      events: {\n        dataPointSelection: function (event, chartContext, config) {\n          const dataPointIndex = config.dataPointIndex;\n          const selectedXValue = option.xaxis.categories[dataPointIndex];\n          eachBarClick(selectedXValue, event);\n        }\n      }\n    },\n    xaxis: {\n      categories: xAxis\n    },\n    title: {\n      text: title,\n      style: {\n        fontSize: \"14px\",\n        fontWeight: \"bold\",\n        fontFamily: \"Bukra\",\n        color: \"black\"\n      }\n    },\n    plotOptions: {\n      bar: {\n        columnWidth: 50,\n        colors: {\n          ranges: [{\n            from: -100,\n            to: 0,\n            color: \"#b70849\"\n          }, {\n            from: 0,\n            to: 100,\n            color: \"#1034a6\"\n          }]\n        }\n      }\n    },\n    // dataLabels: {\n    //   enabled: true,\n    //   formatter: function (val, opts) {\n    //     const isPositive = val >= 0;\n    //     return isPositive && type == \"progress\" ? `+${val}` : val.toString();\n    //   },\n    // },\n    yaxis: {\n      forceNiceScale: true,\n      labels: {\n        formatter: function (val) {\n          return Math.round(val);\n        }\n      }\n    }\n  });\n  useEffect(() => {\n    setPopupData(barChartPopoverdata);\n    setsubTitles(prevState => ({\n      ...prevState,\n      subTitle: title\n    }));\n    if (data) {\n      setdataSeries([{\n        name: name,\n        data: data\n      }]);\n    }\n  }, [data]);\n  useEffect(() => {\n    setsubTitles(prevState => ({\n      ...prevState,\n      subTitle: title\n    }));\n  }, []);\n  useEffect(() => {\n    //setdataSeries(data);\n    //if (data) {\n    //const categories = data.map((item) => item);\n    //setsubTitles(subTitle);\n    setsubTitles(prevState => ({\n      ...prevState,\n      subTitle: title\n    }));\n    setPopupData(barChartPopoverdata);\n    if (data) {\n      setdataSeries([{\n        name: name,\n        data: data\n      }]);\n    }\n    setOption(prevState => ({\n      ...prevState,\n      title: {\n        text: title\n      },\n      xaxis: {\n        categories: xAxis\n      },\n      chart: {\n        events: {\n          dataPointSelection: handleDataPointSelection\n        }\n      }\n    }));\n    const handleDataPointSelection = (event, chartContext, config) => {\n      const dataPointIndex = config.dataPointIndex;\n      const selectedXValue = xAxis[dataPointIndex];\n      eachBarClick(selectedXValue, event);\n    };\n\n    // setOption((prevOption) => ({\n    //   ...prevOption,\n    //   chart: {\n    //     events: {\n    //       dataPointSelection: handleDataPointSelection,\n    //     },\n    //   },\n    // }));\n  }, [xAxis]);\n  const xLabelToIndexMap = {};\n  option.xaxis.categories.forEach((label, index) => {\n    xLabelToIndexMap[label] = index;\n  });\n  const eachBarClick = (value, event) => {\n    const barPosition = {\n      x: event.clientX - 125,\n      y: 200 //event.clientY,\n    };\n\n    eachBarClicked ? eachBarClicked(value, title) : console.log(\"noo function\");\n    setPopupPosition(barPosition);\n  };\n\n  //this is to add class name to x-xis label\n  const wrapXAxisLabels = (chartContext, _ref2) => {\n    let {\n      axis,\n      tick,\n      text\n    } = _ref2;\n    if (axis === \"xaxis\") {\n      tick.classList.add(\"apexchart-xaxis-label\");\n    }\n  };\n  const handleClosePopover = () => {\n    setPopupData(null); // Clear the popover data to close it\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bar-chart\",\n    children: [/*#__PURE__*/_jsxDEV(Chart, {\n      options: option,\n      series: dataSeries,\n      type: \"bar\",\n      height: 350,\n      width: width ? 550 : \"100%\",\n      events: {\n        dataPointSelection: wrapXAxisLabels // Apply the class to x-axis labels\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), barChartPopoverdata && /*#__PURE__*/_jsxDEV(Popover, {\n      tablePopupData: barChartPopoverdata,\n      popoverPosition: popupPosition,\n      onClose: handleClosePopover\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 5\n  }, this);\n};\n_s(BarChart, \"dzwD6ioEbQSeMLvjeByyt4KSq0U=\");\n_c = BarChart;\nvar _c;\n$RefreshReg$(_c, \"BarChart\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Chart","Popover","BarChart","data","xAxis","title","name","width","eachBarClicked","barChartPopoverdata","subTitle","dataSeries","setdataSeries","subTitles","setsubTitles","popupPosition","setPopupPosition","barRef","popupData","setPopupData","option","setOption","legend","show","chart","events","dataPointSelection","event","chartContext","config","dataPointIndex","selectedXValue","xaxis","categories","eachBarClick","text","style","fontSize","fontWeight","fontFamily","color","plotOptions","bar","columnWidth","colors","ranges","from","to","yaxis","forceNiceScale","labels","formatter","val","Math","round","prevState","handleDataPointSelection","xLabelToIndexMap","forEach","label","index","value","barPosition","x","clientX","y","console","log","wrapXAxisLabels","axis","tick","classList","add","handleClosePopover"],"sources":["/Users/eanas.v/Desktop/DESC-Projects/2023/DB-managmnt-app/dashboard/src/components/Graph/barChart/BarChart.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport Chart from \"react-apexcharts\";\nimport { getHttp } from \"../../../service/APIRequest\";\nimport { Popover } from \"../../popup/Popover\";\nimport \"../Chart.css\";\nimport \"./BarChartPopup.css\";\n\ninterface BarChartInterface {\n  data;\n  xAxis;\n  title?;\n  name?;\n  width?: any;\n  eachBarClicked?: any;\n  barChartPopoverdata?: any;\n  subTitle?: any;\n}\n\nexport const BarChart: React.FC<BarChartInterface> = ({\n  data,\n  xAxis,\n  title,\n  name,\n  width,\n  eachBarClicked,\n  barChartPopoverdata,\n  subTitle,\n}) => {\n  const [dataSeries, setdataSeries] = useState<any>([\n    {\n      name: title, //will be displayed on the y-axis\n      data: data,\n    },\n  ]);\n\n  const [subTitles, setsubTitles] = useState<any>({\n    title: title,\n    subTitle: title,\n  });\n  const [popupPosition, setPopupPosition] = useState(null);\n  const barRef = useRef(null);\n  const [popupData, setPopupData] = useState(barChartPopoverdata);\n  const [option, setOption] = useState<any>({\n    legend: {\n      show: false,\n    },\n    chart: {\n      events: {\n        dataPointSelection: function (event, chartContext, config) {\n          const dataPointIndex = config.dataPointIndex;\n          const selectedXValue = option.xaxis.categories[dataPointIndex];\n          eachBarClick(selectedXValue, event);\n        },\n      },\n    },\n    xaxis: {\n      categories: xAxis,\n    },\n    title: {\n      text: title,\n      style: {\n        fontSize: \"14px\",\n        fontWeight: \"bold\",\n        fontFamily: \"Bukra\",\n        color: \"black\",\n      },\n    },\n    plotOptions: {\n      bar: {\n        columnWidth: 50,\n        colors: {\n          ranges: [\n            {\n              from: -100,\n              to: 0,\n              color: \"#b70849\",\n            },\n            {\n              from: 0,\n              to: 100,\n              color: \"#1034a6\",\n            },\n          ],\n        },\n      },\n    },\n    // dataLabels: {\n    //   enabled: true,\n    //   formatter: function (val, opts) {\n    //     const isPositive = val >= 0;\n    //     return isPositive && type == \"progress\" ? `+${val}` : val.toString();\n    //   },\n    // },\n    yaxis: {\n      forceNiceScale: true,\n      labels: {\n        formatter: function (val) {\n          return Math.round(val);\n        },\n      },\n    },\n  });\n\n  useEffect(() => {\n    setPopupData(barChartPopoverdata);\n    setsubTitles((prevState) => ({ ...prevState, subTitle: title }));\n    if (data) {\n      setdataSeries([\n        {\n          name: name,\n          data: data,\n        },\n      ]);\n    }\n  }, [data]);\n\n  useEffect(() => {\n    setsubTitles((prevState) => ({ ...prevState, subTitle: title }));\n  }, []);\n\n  useEffect(() => {\n    //setdataSeries(data);\n    //if (data) {\n    //const categories = data.map((item) => item);\n    //setsubTitles(subTitle);\n    setsubTitles((prevState) => ({ ...prevState, subTitle: title }));\n    setPopupData(barChartPopoverdata);\n    if (data) {\n      setdataSeries([\n        {\n          name: name,\n          data: data,\n        },\n      ]);\n    }\n    setOption((prevState) => ({\n      ...prevState,\n      title: {\n        text: title,\n      },\n      xaxis: {\n        categories: xAxis,\n      },\n      chart: {\n        events: {\n          dataPointSelection: handleDataPointSelection,\n        },\n      },\n    }));\n\n    const handleDataPointSelection = (event, chartContext, config) => {\n      const dataPointIndex = config.dataPointIndex;\n      const selectedXValue = xAxis[dataPointIndex];\n      eachBarClick(selectedXValue, event);\n    };\n\n    // setOption((prevOption) => ({\n    //   ...prevOption,\n    //   chart: {\n    //     events: {\n    //       dataPointSelection: handleDataPointSelection,\n    //     },\n    //   },\n    // }));\n  }, [xAxis]);\n\n  const xLabelToIndexMap = {};\n  option.xaxis.categories.forEach((label, index) => {\n    xLabelToIndexMap[label] = index;\n  });\n\n  const eachBarClick = (value, event) => {\n    const barPosition = {\n      x: event.clientX - 125,\n      y: 200, //event.clientY,\n    };\n    eachBarClicked ? eachBarClicked(value, title) : console.log(\"noo function\");\n    setPopupPosition(barPosition);\n  };\n\n  //this is to add class name to x-xis label\n  const wrapXAxisLabels = (chartContext, { axis, tick, text }) => {\n    if (axis === \"xaxis\") {\n      tick.classList.add(\"apexchart-xaxis-label\");\n    }\n  };\n\n  const handleClosePopover = () => {\n    setPopupData(null); // Clear the popover data to close it\n  };\n\n  return (\n    <div className=\"bar-chart\">\n      {/* onClick={() => setPopupData(null)} */}\n      <Chart\n        options={option}\n        series={dataSeries}\n        type=\"bar\"\n        height={350}\n        width={width ? 550 : \"100%\"}\n        events={{\n          dataPointSelection: wrapXAxisLabels, // Apply the class to x-axis labels\n        }}\n      />\n      {barChartPopoverdata && (\n        <Popover\n          tablePopupData={barChartPopoverdata}\n          popoverPosition={popupPosition}\n          onClose={handleClosePopover}\n        />\n      )}\n    </div>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}