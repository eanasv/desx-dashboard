{"ast":null,"code":"var _jsxFileName = \"/Users/eanas.v/Desktop/DESC-Projects/2023/DB-managmnt-app/dashboard/src/pages/Tabs/tab3/Chart1.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport LineChart from \"../../../components/Graph/lineChart/LineChart\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chart1 = _ref => {\n  _s();\n  let {\n    data\n  } = _ref;\n  const [xAaxis, setXAxis] = useState([]);\n  const [chartData, setchartData] = useState(data);\n  useEffect(() => {\n    drawChart();\n  }, [data]);\n  const drawChart = () => {\n    if (data && data.length > 0) {\n      const series = data === null || data === void 0 ? void 0 : data.map(company => {\n        var _company$monthlyAvera;\n        return {\n          name: company.companyName,\n          data: (_company$monthlyAvera = company.monthlyAverages) === null || _company$monthlyAvera === void 0 ? void 0 : _company$monthlyAvera.map(monthlyAverage => {\n            return monthlyAverage.averageScore;\n          })\n        };\n      });\n      setchartData(series);\n      const xAxis = data === null || data === void 0 ? void 0 : data.map(company => {\n        var _company$monthlyAvera2;\n        return (_company$monthlyAvera2 = company.monthlyAverages) === null || _company$monthlyAvera2 === void 0 ? void 0 : _company$monthlyAvera2.map(monthlyAverage => {\n          if (company.monthlyAverages.length == 1) {\n            //\n            return monthlyAverage.month;\n          } else {\n            return monthlyAverage.month;\n          }\n        });\n        //return month;\n      });\n\n      const dataArray = xAxis[xAxis.length - 1]; // Example array with more than 8 elements\n\n      let truncatedArray = [...dataArray]; // Create a copy of the original array\n\n      if (truncatedArray.length > 8) {\n        const removeCount = truncatedArray.length - 8; // Calculate the number of elements to remove\n\n        for (let i = 2; i < truncatedArray.length - 2; i++) {\n          const randomIndex = Math.floor(Math.random() * (truncatedArray.length - 4)) + 2; // Generate a random index between 2 and length - 3\n          truncatedArray.splice(randomIndex, 1); // Remove the element at the random index\n        }\n      }\n\n      console.log(truncatedArray); // The truncated array with a length of 8\n      //setXAxis(xAxis[xAxis.length - 1]);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(LineChart, {\n      data: chartData,\n      xAxis: xAaxis,\n      title: \"All entities\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(Chart1, \"NfVxmT6biJKOddXbyB4+EGwJjUE=\");\n_c = Chart1;\nexport default Chart1;\nvar _c;\n$RefreshReg$(_c, \"Chart1\");","map":{"version":3,"names":["React","useEffect","useState","LineChart","Chart1","data","xAaxis","setXAxis","chartData","setchartData","drawChart","length","series","map","company","name","companyName","monthlyAverages","monthlyAverage","averageScore","xAxis","month","dataArray","truncatedArray","removeCount","i","randomIndex","Math","floor","random","splice","console","log"],"sources":["/Users/eanas.v/Desktop/DESC-Projects/2023/DB-managmnt-app/dashboard/src/pages/Tabs/tab3/Chart1.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport LineChart from \"../../../components/Graph/lineChart/LineChart\";\n\ninterface Chart1props {\n  data?: any;\n}\n\nconst Chart1: React.FC<Chart1props> = ({ data }) => {\n  const [xAaxis, setXAxis] = useState([]);\n  const [chartData, setchartData] = useState(data);\n\n  useEffect(() => {\n    drawChart();\n  }, [data]);\n\n  const drawChart = () => {\n    if (data && data.length > 0) {\n      const series = data?.map((company) => {\n        return {\n          name: company.companyName,\n          data: company.monthlyAverages?.map((monthlyAverage) => {\n            return monthlyAverage.averageScore;\n          }),\n        };\n      });\n      setchartData(series);\n      const xAxis = data?.map((company) => {\n        return company.monthlyAverages?.map((monthlyAverage) => {\n          if (company.monthlyAverages.length == 1) {\n            //\n            return monthlyAverage.month;\n          } else {\n            return monthlyAverage.month;\n          }\n        });\n        //return month;\n      });\n      const dataArray = xAxis[xAxis.length - 1]; // Example array with more than 8 elements\n\n      let truncatedArray = [...dataArray]; // Create a copy of the original array\n\n      if (truncatedArray.length > 8) {\n        const removeCount = truncatedArray.length - 8; // Calculate the number of elements to remove\n\n        for (let i = 2; i < truncatedArray.length - 2; i++) {\n          const randomIndex =\n            Math.floor(Math.random() * (truncatedArray.length - 4)) + 2; // Generate a random index between 2 and length - 3\n          truncatedArray.splice(randomIndex, 1); // Remove the element at the random index\n        }\n      }\n\n      console.log(truncatedArray); // The truncated array with a length of 8\n      //setXAxis(xAxis[xAxis.length - 1]);\n    }\n  };\n\n  return (\n    <div>\n      <LineChart data={chartData} xAxis={xAaxis} title=\"All entities\" />\n    </div>\n  );\n};\n\nexport default Chart1;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,SAAS,MAAM,+CAA+C;AAAC;AAMtE,MAAMC,MAA6B,GAAG,QAAc;EAAA;EAAA,IAAb;IAAEC;EAAK,CAAC;EAC7C,MAAM,CAACC,MAAM,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EACvC,MAAM,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAACG,IAAI,CAAC;EAEhDJ,SAAS,CAAC,MAAM;IACdS,SAAS,EAAE;EACb,CAAC,EAAE,CAACL,IAAI,CAAC,CAAC;EAEV,MAAMK,SAAS,GAAG,MAAM;IACtB,IAAIL,IAAI,IAAIA,IAAI,CAACM,MAAM,GAAG,CAAC,EAAE;MAC3B,MAAMC,MAAM,GAAGP,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEQ,GAAG,CAAEC,OAAO,IAAK;QAAA;QACpC,OAAO;UACLC,IAAI,EAAED,OAAO,CAACE,WAAW;UACzBX,IAAI,2BAAES,OAAO,CAACG,eAAe,0DAAvB,sBAAyBJ,GAAG,CAAEK,cAAc,IAAK;YACrD,OAAOA,cAAc,CAACC,YAAY;UACpC,CAAC;QACH,CAAC;MACH,CAAC,CAAC;MACFV,YAAY,CAACG,MAAM,CAAC;MACpB,MAAMQ,KAAK,GAAGf,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEQ,GAAG,CAAEC,OAAO,IAAK;QAAA;QACnC,iCAAOA,OAAO,CAACG,eAAe,2DAAvB,uBAAyBJ,GAAG,CAAEK,cAAc,IAAK;UACtD,IAAIJ,OAAO,CAACG,eAAe,CAACN,MAAM,IAAI,CAAC,EAAE;YACvC;YACA,OAAOO,cAAc,CAACG,KAAK;UAC7B,CAAC,MAAM;YACL,OAAOH,cAAc,CAACG,KAAK;UAC7B;QACF,CAAC,CAAC;QACF;MACF,CAAC,CAAC;;MACF,MAAMC,SAAS,GAAGF,KAAK,CAACA,KAAK,CAACT,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;;MAE3C,IAAIY,cAAc,GAAG,CAAC,GAAGD,SAAS,CAAC,CAAC,CAAC;;MAErC,IAAIC,cAAc,CAACZ,MAAM,GAAG,CAAC,EAAE;QAC7B,MAAMa,WAAW,GAAGD,cAAc,CAACZ,MAAM,GAAG,CAAC,CAAC,CAAC;;QAE/C,KAAK,IAAIc,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,cAAc,CAACZ,MAAM,GAAG,CAAC,EAAEc,CAAC,EAAE,EAAE;UAClD,MAAMC,WAAW,GACfC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,IAAIN,cAAc,CAACZ,MAAM,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;UAC/DY,cAAc,CAACO,MAAM,CAACJ,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC;QACzC;MACF;;MAEAK,OAAO,CAACC,GAAG,CAACT,cAAc,CAAC,CAAC,CAAC;MAC7B;IACF;EACF,CAAC;;EAED,oBACE;IAAA,uBACE,QAAC,SAAS;MAAC,IAAI,EAAEf,SAAU;MAAC,KAAK,EAAEF,MAAO;MAAC,KAAK,EAAC;IAAc;MAAA;MAAA;MAAA;IAAA;EAAG;IAAA;IAAA;IAAA;EAAA,QAC9D;AAEV,CAAC;AAAC,GAtDIF,MAA6B;AAAA,KAA7BA,MAA6B;AAwDnC,eAAeA,MAAM;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}