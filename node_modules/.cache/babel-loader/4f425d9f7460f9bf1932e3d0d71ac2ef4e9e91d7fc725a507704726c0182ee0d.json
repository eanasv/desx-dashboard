{"ast":null,"code":"var _jsxFileName = \"/Users/eanas.v/Desktop/DESC-Projects/2023/DB-managmnt-app/dashboard/src/pages/Tabs/tab3/Chart3.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { BarChart } from \"../../../components/Graph/barChart/BarChart\";\nimport { getHttp } from \"../../../service/APIRequest\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Chart3 = _ref => {\n  _s();\n  let {\n    startDate,\n    endDate,\n    selectedEntityList,\n    entityList\n  } = _ref;\n  const [chartData, setchartData] = useState();\n  const [xAxis, setxAxis] = useState([]);\n  const [dateRangeProps, setdateRangeProps] = useState({\n    fromDate: startDate,\n    toDate: endDate\n  });\n  const [selectedEntities, setselectedEntities] = useState(selectedEntityList);\n  const [allEntityList, setallEntityList] = useState(entityList);\n  useEffect(() => {\n    setallEntityList(allEntityList);\n    setselectedEntities(selectedEntityList);\n    getScoreOfSelectedEntity(startDate, endDate, selectedEntityList);\n  }, [selectedEntityList]);\n  useEffect(() => {\n    getScoreOfSelectedEntity(startDate, endDate);\n  }, []);\n  useEffect(() => {\n    //getScoreOfSelectedEntity(startDate, endDate);\n    //setchartData(data);\n    setdateRangeProps({\n      fromDate: startDate,\n      toDate: endDate\n    });\n  }, []);\n  const getScoreOfSelectedEntity = async (startDate, endDate, selectedEntities) => {\n    var _entityLists;\n    var entityLists = selectedEntities;\n    if (((_entityLists = entityLists) === null || _entityLists === void 0 ? void 0 : _entityLists.length) == 0) {\n      entityLists = entityList === null || entityList === void 0 ? void 0 : entityList.map(item => item.label);\n    }\n    const response = await getHttp(\"skills/skill-ranks\", {\n      startDate: dateRangeProps.fromDate || startDate,\n      endDate: dateRangeProps.toDate || endDate,\n      entityNames: entityLists.join(\",\")\n    });\n    drawChart(response);\n  };\n  async function drawChart(responseData) {\n    // var dataOfChart = [\n    //   {\n    //     name: \"Improvement over last year\", //chartData?.map((company) => company.entityName),\n    //     data: responseData?.map((company) => company.avg_score_diff),\n    //   },\n    // ];\n    var xAxisdata = responseData === null || responseData === void 0 ? void 0 : responseData.map(company => company.entityName);\n    setxAxis(xAxisdata);\n    setchartData(responseData === null || responseData === void 0 ? void 0 : responseData.map(company => company.avg_score_diff));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(BarChart, {\n      data: chartData,\n      xAxis: xAxis,\n      title: \"Improvement skill score\",\n      type: \"progress\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_s(Chart3, \"vn2JVuT6ATJmdHc7IjJMrR3NWWc=\");\n_c = Chart3;\nvar _c;\n$RefreshReg$(_c, \"Chart3\");","map":{"version":3,"names":["React","useEffect","useState","BarChart","getHttp","Chart3","startDate","endDate","selectedEntityList","entityList","chartData","setchartData","xAxis","setxAxis","dateRangeProps","setdateRangeProps","fromDate","toDate","selectedEntities","setselectedEntities","allEntityList","setallEntityList","getScoreOfSelectedEntity","entityLists","length","map","item","label","response","entityNames","join","drawChart","responseData","xAxisdata","company","entityName","avg_score_diff"],"sources":["/Users/eanas.v/Desktop/DESC-Projects/2023/DB-managmnt-app/dashboard/src/pages/Tabs/tab3/Chart3.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { BarChart } from \"../../../components/Graph/barChart/BarChart\";\nimport Component1 from \"../../../components/test/Component1\";\nimport { getHttp } from \"../../../service/APIRequest\";\n\ninterface Chart3Props {\n  startDate: any;\n  endDate: any;\n  selectedEntityList?: any;\n  entityList?: any;\n}\nexport const Chart3: React.FC<Chart3Props> = ({\n  startDate,\n  endDate,\n  selectedEntityList,\n  entityList,\n}) => {\n  const [chartData, setchartData] = useState<any>();\n  const [xAxis, setxAxis] = useState([]);\n  const [dateRangeProps, setdateRangeProps] = useState({\n    fromDate: startDate,\n    toDate: endDate,\n  });\n  const [selectedEntities, setselectedEntities] = useState(selectedEntityList);\n  const [allEntityList, setallEntityList] = useState(entityList);\n\n  useEffect(() => {\n    setallEntityList(allEntityList);\n    setselectedEntities(selectedEntityList);\n    getScoreOfSelectedEntity(startDate, endDate, selectedEntityList);\n  }, [selectedEntityList]);\n\n  useEffect(() => {\n    getScoreOfSelectedEntity(startDate, endDate);\n  }, []);\n\n  useEffect(() => {\n    //getScoreOfSelectedEntity(startDate, endDate);\n    //setchartData(data);\n    setdateRangeProps({ fromDate: startDate, toDate: endDate });\n  }, []);\n\n  const getScoreOfSelectedEntity = async (\n    startDate,\n    endDate,\n    selectedEntities?\n  ) => {\n    var entityLists = selectedEntities;\n    if (entityLists?.length == 0) {\n      entityLists = entityList?.map((item) => item.label);\n    }\n    const response = await getHttp(\"skills/skill-ranks\", {\n      startDate: dateRangeProps.fromDate || startDate,\n      endDate: dateRangeProps.toDate || endDate,\n      entityNames: entityLists.join(\",\"),\n    });\n    drawChart(response);\n  };\n\n  async function drawChart(responseData?) {\n    // var dataOfChart = [\n    //   {\n    //     name: \"Improvement over last year\", //chartData?.map((company) => company.entityName),\n    //     data: responseData?.map((company) => company.avg_score_diff),\n    //   },\n    // ];\n    var xAxisdata = responseData?.map((company) => company.entityName);\n    setxAxis(xAxisdata);\n    setchartData(responseData?.map((company) => company.avg_score_diff));\n  }\n\n  return (\n    <div>\n      <BarChart\n        data={chartData}\n        xAxis={xAxis}\n        title={\"Improvement skill score\"}\n        type=\"progress\"\n      />\n    </div>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}