{"ast":null,"code":"import _slicedToArray from\"/Users/eanas.v/Desktop/DESC-Projects/2023/DB-managmnt-app/dashboard/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect,useState}from\"react\";import{Link,useHistory,useLocation}from\"react-router-dom\";import\"./Breadcrumbs.css\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Breadcrumbs=function Breadcrumbs(_ref){var paths=_ref.paths;var location=useLocation();var history=useHistory();var _useState=useState([]),_useState2=_slicedToArray(_useState,2),breadcrumbNames=_useState2[0],setBreadcrumbNames=_useState2[1];useEffect(function(){var names=getBreadcrumbNames(location.pathname);setBreadcrumbNames(names);},[location]);var getBreadcrumbNames=function getBreadcrumbNames(pathname){var segments=pathname.split(\"/\").filter(function(segment){return segment!==\"\";});return segments;// Return the breadcrumb names based on the segments\n// if (segments.length === 0) {\n//   return [\"\"];\n// } else {\n//   // Get the last segment as the current breadcrumb name\n//   const lastSegment = segments[segments.length - 1];\n//   return [\n//     <Link to=\"/\">\n//       <img\n//         className=\"svg-image1\"\n//         src={require(\"../../assets/home.svg\").default}\n//         alt=\"home\"\n//         width=\"19px\"\n//         height=\"19px\"\n//       />\n//     </Link>,\n//     segments,\n//   ];\n// }\n};// const handleListItemClick = (itemName) => {\n//   // Update the last breadcrumb name and navigate to the corresponding page\n//   const newPathname = `${location.pathname}/${itemName}`;\n//   const names = getBreadcrumbNames(newPathname);\n//   setBreadcrumbNames(names);\n//   history.push(newPathname);\n// };\nvar customNames={entityDetails:\"entities index\",categoryList:\"workforce index\"// Add more custom names as needed\n};var capitalizeFirstLetter=function capitalizeFirstLetter(string){return string.replace(/([A-Z])/g,\" $1\")// Insert space before capital letters\n.replace(/([A-Z])/g,function(match){return match.toLowerCase();})// Convert capital letters to lowercase\n.replace(/^\\w/,function(c){return c.toUpperCase();});// Capitalize the first letter\n};return/*#__PURE__*/_jsx(\"nav\",{children:/*#__PURE__*/_jsxs(\"div\",{className:\"breadcrumbs-container\",children:[/*#__PURE__*/_jsx(Link,{to:\"/\",children:/*#__PURE__*/_jsx(\"img\",{className:\"svg-image1\",src:require(\"../../assets/home.svg\").default,alt:\"home\",width:\"19px\",height:\"19px\"})}),breadcrumbNames.map(function(path,index){return/*#__PURE__*/_jsxs(React.Fragment,{children:[breadcrumbNames.length>1?/*#__PURE__*/_jsx(\"span\",{children:\" / \"}):\"\",breadcrumbNames.length==1?/*#__PURE__*/_jsx(_Fragment,{}):index<breadcrumbNames.length-1?/*#__PURE__*/_jsx(Link,{to:\"/\".concat(breadcrumbNames.slice(0,index+1).join(\"/\")),children:capitalizeFirstLetter(path)}):/*#__PURE__*/_jsx(\"span\",{children:capitalizeFirstLetter(path)})]},index);})]})})// <nav>\n//   <div className=\"breadcrumbs-container\">\n//     <Link to=\"/\">\n//       <img\n//         className=\"svg-image1\"\n//         src={require(\"../../assets/home.svg\").default}\n//         alt=\"home\"\n//         width=\"19px\"\n//         height=\"19px\"\n//       />\n//     </Link>\n//     {paths.map((path, index) => (\n//       <React.Fragment key={index}>\n//         <span> / </span>\n//         {index < paths.length - 1 ? (\n//           <Link to={path.url}>{path.label}</Link>\n//         ) : (\n//           <span>{path.label}</span>\n//         )}\n//       </React.Fragment>\n//     ))}\n//   </div>\n// </nav>\n// <nav>\n//   <div className=\"breadcrumbs-container\">\n//     {breadcrumbNames.map((name, index) => (\n//       <div key={index}>\n//         {index !== breadcrumbNames.length - 1 ? (\n//           <Link to={`${breadcrumbNames.slice(0, index + 1).join(\"/\")}`}>\n//             {name}\n//           </Link>\n//         ) : (\n//           <span>{name.length != 0 ? \"/\" + name : \"\"}</span>\n//         )}\n//       </div>\n//     ))}\n//   </div>\n// </nav>\n;};export default Breadcrumbs;","map":{"version":3,"names":["React","useEffect","useState","Link","useHistory","useLocation","Breadcrumbs","paths","location","history","breadcrumbNames","setBreadcrumbNames","names","getBreadcrumbNames","pathname","segments","split","filter","segment","customNames","entityDetails","categoryList","capitalizeFirstLetter","string","replace","match","toLowerCase","c","toUpperCase","require","default","map","path","index","length","slice","join"],"sources":["/Users/eanas.v/Desktop/DESC-Projects/2023/DB-managmnt-app/dashboard/src/components/breadcrumbs/Breadcrumbs.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\n\nimport \"./Breadcrumbs.css\";\n\nconst Breadcrumbs = ({ paths }) => {\n  const location = useLocation();\n  const history = useHistory();\n  const [breadcrumbNames, setBreadcrumbNames] = useState([]);\n\n  useEffect(() => {\n    const names = getBreadcrumbNames(location.pathname);\n    setBreadcrumbNames(names);\n  }, [location]);\n\n  const getBreadcrumbNames = (pathname) => {\n    const segments = pathname.split(\"/\").filter((segment) => segment !== \"\");\n    return segments;\n\n    // Return the breadcrumb names based on the segments\n    // if (segments.length === 0) {\n    //   return [\"\"];\n    // } else {\n    //   // Get the last segment as the current breadcrumb name\n    //   const lastSegment = segments[segments.length - 1];\n    //   return [\n    //     <Link to=\"/\">\n    //       <img\n    //         className=\"svg-image1\"\n    //         src={require(\"../../assets/home.svg\").default}\n    //         alt=\"home\"\n    //         width=\"19px\"\n    //         height=\"19px\"\n    //       />\n    //     </Link>,\n    //     segments,\n    //   ];\n    // }\n  };\n\n  // const handleListItemClick = (itemName) => {\n  //   // Update the last breadcrumb name and navigate to the corresponding page\n  //   const newPathname = `${location.pathname}/${itemName}`;\n  //   const names = getBreadcrumbNames(newPathname);\n  //   setBreadcrumbNames(names);\n  //   history.push(newPathname);\n\n  // };\n\n  const customNames = {\n    entityDetails: \"entities index\",\n    categoryList: \"workforce index\",\n    // Add more custom names as needed\n  };\n\n  const capitalizeFirstLetter = (string) => {\n    return string\n      .replace(/([A-Z])/g, \" $1\") // Insert space before capital letters\n      .replace(/([A-Z])/g, (match) => match.toLowerCase()) // Convert capital letters to lowercase\n      .replace(/^\\w/, (c) => c.toUpperCase()); // Capitalize the first letter\n  };\n\n  return (\n    <nav>\n      <div className=\"breadcrumbs-container\">\n        <Link to=\"/\">\n          <img\n            className=\"svg-image1\"\n            src={require(\"../../assets/home.svg\").default}\n            alt=\"home\"\n            width=\"19px\"\n            height=\"19px\"\n          />\n        </Link>\n        {breadcrumbNames.map((path, index) => (\n          <React.Fragment key={index}>\n            {breadcrumbNames.length > 1 ? <span> / </span> : \"\"}\n            {breadcrumbNames.length == 1 ? (\n              <></>\n            ) : index < breadcrumbNames.length - 1 ? (\n              <Link to={`/${breadcrumbNames.slice(0, index + 1).join(\"/\")}`}>\n                {capitalizeFirstLetter(path)}\n              </Link>\n            ) : (\n              <span>{capitalizeFirstLetter(path)}</span>\n            )}\n          </React.Fragment>\n        ))}\n      </div>\n    </nav>\n    // <nav>\n    //   <div className=\"breadcrumbs-container\">\n    //     <Link to=\"/\">\n    //       <img\n    //         className=\"svg-image1\"\n    //         src={require(\"../../assets/home.svg\").default}\n    //         alt=\"home\"\n    //         width=\"19px\"\n    //         height=\"19px\"\n    //       />\n    //     </Link>\n    //     {paths.map((path, index) => (\n    //       <React.Fragment key={index}>\n    //         <span> / </span>\n    //         {index < paths.length - 1 ? (\n    //           <Link to={path.url}>{path.label}</Link>\n    //         ) : (\n    //           <span>{path.label}</span>\n    //         )}\n    //       </React.Fragment>\n    //     ))}\n    //   </div>\n    // </nav>\n\n    // <nav>\n    //   <div className=\"breadcrumbs-container\">\n    //     {breadcrumbNames.map((name, index) => (\n    //       <div key={index}>\n    //         {index !== breadcrumbNames.length - 1 ? (\n    //           <Link to={`${breadcrumbNames.slice(0, index + 1).join(\"/\")}`}>\n    //             {name}\n    //           </Link>\n    //         ) : (\n    //           <span>{name.length != 0 ? \"/\" + name : \"\"}</span>\n    //         )}\n    //       </div>\n    //     ))}\n    //   </div>\n    // </nav>\n  );\n};\n\nexport default Breadcrumbs;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}