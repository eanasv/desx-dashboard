{"ast":null,"code":"var _jsxFileName = \"/Users/eanas.v/Desktop/DESC-Projects/2023/DB-managmnt-app/dashboard/src/pages/Tabs/tab3/Chart4.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { BarChart } from \"../../../components/Graph/barChart/BarChart\";\nimport { getHttp } from \"../../../service/APIRequest\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Chart4 = _ref => {\n  _s();\n  let {\n    selectedEntityList,\n    entityList,\n    fetchChart4Data\n  } = _ref;\n  const [chartData, setchartData] = useState();\n  const [xAxis, setxAxis] = useState([]);\n  const [selectedEntities, setselectedEntities] = useState(selectedEntityList);\n  const [allEntityList, setallEntityList] = useState(entityList);\n  useEffect(() => {\n    setallEntityList(allEntityList);\n    setselectedEntities(selectedEntityList);\n    getScoreOfEntityLatestDate(selectedEntityList);\n  }, [selectedEntityList]);\n  const getScoreOfEntityLatestDate = async selectedEntities => {\n    var _entityLists, _entityLists2;\n    var entityLists = selectedEntities;\n    if (((_entityLists = entityLists) === null || _entityLists === void 0 ? void 0 : _entityLists.length) == 0) {\n      entityLists = entityList === null || entityList === void 0 ? void 0 : entityList.map(item => item.label);\n    }\n    const response = await getHttp(\"skills/latestScore\", {\n      entityNames: (_entityLists2 = entityLists) === null || _entityLists2 === void 0 ? void 0 : _entityLists2.join(\",\")\n    });\n    drawChart(response);\n    await fetchChart4Data(response);\n  };\n  async function drawChart(responseData) {\n    // var dataOfChart = [\n    //   {\n    //     name: \"Latest score of \" + responseData[0].monthlyAverages[0].month, //chartData?.map((company) => company.entityName),\n    //     data: responseData?.map((company) => company.avg_score_diff),\n    //   },\n    // ];\n    //   name: responseData[0].companyName,\n    //   data: responseData[0].monthlyAverages.map((monthlyAverage) => {\n    //     return monthlyAverage.averageScore;\n    //   }),\n    // };\n    var xAxisdata = responseData === null || responseData === void 0 ? void 0 : responseData.map(company => company.companyName);\n    setxAxis(xAxisdata);\n    setchartData(responseData === null || responseData === void 0 ? void 0 : responseData.map(company => company.monthlyAverages[0].averageScore));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\" \", /*#__PURE__*/_jsxDEV(BarChart, {\n      data: chartData,\n      xAxis: xAxis,\n      title: \"Latest Score\",\n      type: \"latest\"\n      //yAxis={\"Latest score of \" + responseData[0].monthlyAverages[0].month}\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(Chart4, \"0RCBFTHtbaaoxDzDelnsN2VW/CI=\");\n_c = Chart4;\nvar _c;\n$RefreshReg$(_c, \"Chart4\");","map":{"version":3,"names":["React","useEffect","useState","BarChart","getHttp","Chart4","selectedEntityList","entityList","fetchChart4Data","chartData","setchartData","xAxis","setxAxis","selectedEntities","setselectedEntities","allEntityList","setallEntityList","getScoreOfEntityLatestDate","entityLists","length","map","item","label","response","entityNames","join","drawChart","responseData","xAxisdata","company","companyName","monthlyAverages","averageScore"],"sources":["/Users/eanas.v/Desktop/DESC-Projects/2023/DB-managmnt-app/dashboard/src/pages/Tabs/tab3/Chart4.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { BarChart } from \"../../../components/Graph/barChart/BarChart\";\nimport { getHttp } from \"../../../service/APIRequest\";\n\ninterface Chart4Props {\n  selectedEntityList?: any;\n  entityList?: any;\n  fetchChart4Data?: any;\n}\nexport const Chart4: React.FC<Chart4Props> = ({\n  selectedEntityList,\n  entityList,\n  fetchChart4Data,\n}) => {\n  const [chartData, setchartData] = useState<any>();\n  const [xAxis, setxAxis] = useState([]);\n  const [selectedEntities, setselectedEntities] = useState(selectedEntityList);\n  const [allEntityList, setallEntityList] = useState(entityList);\n\n  useEffect(() => {\n    setallEntityList(allEntityList);\n    setselectedEntities(selectedEntityList);\n    getScoreOfEntityLatestDate(selectedEntityList);\n  }, [selectedEntityList]);\n\n  const getScoreOfEntityLatestDate = async (selectedEntities?) => {\n    var entityLists = selectedEntities;\n    if (entityLists?.length == 0) {\n      entityLists = entityList?.map((item) => item.label);\n    }\n    const response = await getHttp(\"skills/latestScore\", {\n      entityNames: entityLists?.join(\",\"),\n    });\n    drawChart(response);\n    await fetchChart4Data(response);\n  };\n\n  async function drawChart(responseData?) {\n    // var dataOfChart = [\n    //   {\n    //     name: \"Latest score of \" + responseData[0].monthlyAverages[0].month, //chartData?.map((company) => company.entityName),\n    //     data: responseData?.map((company) => company.avg_score_diff),\n    //   },\n    // ];\n    //   name: responseData[0].companyName,\n    //   data: responseData[0].monthlyAverages.map((monthlyAverage) => {\n    //     return monthlyAverage.averageScore;\n    //   }),\n    // };\n    var xAxisdata = responseData?.map((company) => company.companyName);\n    setxAxis(xAxisdata);\n    setchartData(\n      responseData?.map((company) => company.monthlyAverages[0].averageScore)\n    );\n  }\n\n  return (\n    <div>\n      {\" \"}\n      <BarChart\n        data={chartData}\n        xAxis={xAxis}\n        title={\"Latest Score\"}\n        type=\"latest\"\n        //yAxis={\"Latest score of \" + responseData[0].monthlyAverages[0].month}\n      />\n    </div>\n  );\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,6CAA6C;AACtE,SAASC,OAAO,QAAQ,6BAA6B;AAAC;AAOtD,OAAO,MAAMC,MAA6B,GAAG,QAIvC;EAAA;EAAA,IAJwC;IAC5CC,kBAAkB;IAClBC,UAAU;IACVC;EACF,CAAC;EACC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,EAAO;EACjD,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACW,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGZ,QAAQ,CAACI,kBAAkB,CAAC;EAC5E,MAAM,CAACS,aAAa,EAAEC,gBAAgB,CAAC,GAAGd,QAAQ,CAACK,UAAU,CAAC;EAE9DN,SAAS,CAAC,MAAM;IACde,gBAAgB,CAACD,aAAa,CAAC;IAC/BD,mBAAmB,CAACR,kBAAkB,CAAC;IACvCW,0BAA0B,CAACX,kBAAkB,CAAC;EAChD,CAAC,EAAE,CAACA,kBAAkB,CAAC,CAAC;EAExB,MAAMW,0BAA0B,GAAG,MAAOJ,gBAAiB,IAAK;IAAA;IAC9D,IAAIK,WAAW,GAAGL,gBAAgB;IAClC,IAAI,iBAAAK,WAAW,iDAAX,aAAaC,MAAM,KAAI,CAAC,EAAE;MAC5BD,WAAW,GAAGX,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEa,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,KAAK,CAAC;IACrD;IACA,MAAMC,QAAQ,GAAG,MAAMnB,OAAO,CAAC,oBAAoB,EAAE;MACnDoB,WAAW,mBAAEN,WAAW,kDAAX,cAAaO,IAAI,CAAC,GAAG;IACpC,CAAC,CAAC;IACFC,SAAS,CAACH,QAAQ,CAAC;IACnB,MAAMf,eAAe,CAACe,QAAQ,CAAC;EACjC,CAAC;EAED,eAAeG,SAAS,CAACC,YAAa,EAAE;IACtC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAIC,SAAS,GAAGD,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEP,GAAG,CAAES,OAAO,IAAKA,OAAO,CAACC,WAAW,CAAC;IACnElB,QAAQ,CAACgB,SAAS,CAAC;IACnBlB,YAAY,CACViB,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEP,GAAG,CAAES,OAAO,IAAKA,OAAO,CAACE,eAAe,CAAC,CAAC,CAAC,CAACC,YAAY,CAAC,CACxE;EACH;EAEA,oBACE;IAAA,WACG,GAAG,eACJ,QAAC,QAAQ;MACP,IAAI,EAAEvB,SAAU;MAChB,KAAK,EAAEE,KAAM;MACb,KAAK,EAAE,cAAe;MACtB,IAAI,EAAC;MACL;IAAA;MAAA;MAAA;MAAA;IAAA,QACA;EAAA;IAAA;IAAA;IAAA;EAAA,QACE;AAEV,CAAC;AAAC,GA3DWN,MAA6B;AAAA,KAA7BA,MAA6B;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}