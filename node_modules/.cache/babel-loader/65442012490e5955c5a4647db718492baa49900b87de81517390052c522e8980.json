{"ast":null,"code":"var _jsxFileName = \"/Users/eanas.v/Desktop/DESC-Projects/2023/DB-managmnt-app/dashboard/src/pages/Tabs/tab3/Chart1.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport LineChart from \"../../../components/Graph/lineChart/LineChart\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chart1 = _ref => {\n  _s();\n  let {\n    data\n  } = _ref;\n  const [xAaxis, setXAxis] = useState([]);\n  const [chartData, setchartData] = useState(data);\n  useEffect(() => {\n    setTimeout(() => {\n      //setchartData(data);\n      const series = data === null || data === void 0 ? void 0 : data.map(company => {\n        var _company$monthlyAvera;\n        return {\n          name: company.companyName,\n          data: (_company$monthlyAvera = company.monthlyAverages) === null || _company$monthlyAvera === void 0 ? void 0 : _company$monthlyAvera.map(monthlyAverage => {\n            return monthlyAverage.averageScore;\n          })\n        };\n      });\n      setchartData(series);\n      const xAxis = data === null || data === void 0 ? void 0 : data.map(company => {\n        var _company$monthlyAvera2;\n        console.log(\"eeanna\", company.monthlyAverages.length);\n        return (_company$monthlyAvera2 = company.monthlyAverages) === null || _company$monthlyAvera2 === void 0 ? void 0 : _company$monthlyAvera2.map(monthlyAverage => {\n          if (company.monthlyAverages.length == 1) {\n            //\n            console.log(\"eeanna\", monthlyAverage.month);\n            return monthlyAverage.month.add(0, \"05/2022\");\n          } else {\n            return monthlyAverage.month;\n          }\n        });\n        //return month;\n      });\n\n      console.log(xAxis);\n      setXAxis(xAxis[xAxis.length - 1]);\n      //setXAxis([\"02/2023\", \"05/2022\", \"12/2022\"]);\n    }, 11);\n    // getAverageScoreOfEntity();\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(LineChart, {\n      data: chartData,\n      xAxis: xAaxis,\n      title: \"All entities\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(Chart1, \"NfVxmT6biJKOddXbyB4+EGwJjUE=\");\n_c = Chart1;\nexport default Chart1;\nvar _c;\n$RefreshReg$(_c, \"Chart1\");","map":{"version":3,"names":["React","useEffect","useState","LineChart","Chart1","data","xAaxis","setXAxis","chartData","setchartData","setTimeout","series","map","company","name","companyName","monthlyAverages","monthlyAverage","averageScore","xAxis","console","log","length","month","add"],"sources":["/Users/eanas.v/Desktop/DESC-Projects/2023/DB-managmnt-app/dashboard/src/pages/Tabs/tab3/Chart1.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport LineChart from \"../../../components/Graph/lineChart/LineChart\";\nimport { getHttp } from \"../../../service/APIRequest\";\n\ninterface Chart1props {\n  data?: any;\n}\n\nconst Chart1: React.FC<Chart1props> = ({ data }) => {\n  const [xAaxis, setXAxis] = useState([]);\n  const [chartData, setchartData] = useState(data);\n\n  useEffect(() => {\n    setTimeout(() => {\n      //setchartData(data);\n      const series = data?.map((company) => {\n        return {\n          name: company.companyName,\n          data: company.monthlyAverages?.map((monthlyAverage) => {\n            return monthlyAverage.averageScore;\n          }),\n        };\n      });\n      setchartData(series);\n      const xAxis = data?.map((company) => {\n        console.log(\"eeanna\", company.monthlyAverages.length);\n        return company.monthlyAverages?.map((monthlyAverage) => {\n          if (company.monthlyAverages.length == 1) {\n            //\n            console.log(\"eeanna\", monthlyAverage.month);\n            return monthlyAverage.month.add(0, \"05/2022\");\n          } else {\n            return monthlyAverage.month;\n          }\n        });\n        //return month;\n      });\n      console.log(xAxis);\n      setXAxis(xAxis[xAxis.length - 1]);\n      //setXAxis([\"02/2023\", \"05/2022\", \"12/2022\"]);\n    }, 11);\n    // getAverageScoreOfEntity();\n  }, [data]);\n\n  return (\n    <div>\n      <LineChart data={chartData} xAxis={xAaxis} title=\"All entities\" />\n    </div>\n  );\n};\n\nexport default Chart1;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,SAAS,MAAM,+CAA+C;AAAC;AAOtE,MAAMC,MAA6B,GAAG,QAAc;EAAA;EAAA,IAAb;IAAEC;EAAK,CAAC;EAC7C,MAAM,CAACC,MAAM,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EACvC,MAAM,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAACG,IAAI,CAAC;EAEhDJ,SAAS,CAAC,MAAM;IACdS,UAAU,CAAC,MAAM;MACf;MACA,MAAMC,MAAM,GAAGN,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEO,GAAG,CAAEC,OAAO,IAAK;QAAA;QACpC,OAAO;UACLC,IAAI,EAAED,OAAO,CAACE,WAAW;UACzBV,IAAI,2BAAEQ,OAAO,CAACG,eAAe,0DAAvB,sBAAyBJ,GAAG,CAAEK,cAAc,IAAK;YACrD,OAAOA,cAAc,CAACC,YAAY;UACpC,CAAC;QACH,CAAC;MACH,CAAC,CAAC;MACFT,YAAY,CAACE,MAAM,CAAC;MACpB,MAAMQ,KAAK,GAAGd,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEO,GAAG,CAAEC,OAAO,IAAK;QAAA;QACnCO,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAER,OAAO,CAACG,eAAe,CAACM,MAAM,CAAC;QACrD,iCAAOT,OAAO,CAACG,eAAe,2DAAvB,uBAAyBJ,GAAG,CAAEK,cAAc,IAAK;UACtD,IAAIJ,OAAO,CAACG,eAAe,CAACM,MAAM,IAAI,CAAC,EAAE;YACvC;YACAF,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEJ,cAAc,CAACM,KAAK,CAAC;YAC3C,OAAON,cAAc,CAACM,KAAK,CAACC,GAAG,CAAC,CAAC,EAAE,SAAS,CAAC;UAC/C,CAAC,MAAM;YACL,OAAOP,cAAc,CAACM,KAAK;UAC7B;QACF,CAAC,CAAC;QACF;MACF,CAAC,CAAC;;MACFH,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MAClBZ,QAAQ,CAACY,KAAK,CAACA,KAAK,CAACG,MAAM,GAAG,CAAC,CAAC,CAAC;MACjC;IACF,CAAC,EAAE,EAAE,CAAC;IACN;EACF,CAAC,EAAE,CAACjB,IAAI,CAAC,CAAC;EAEV,oBACE;IAAA,uBACE,QAAC,SAAS;MAAC,IAAI,EAAEG,SAAU;MAAC,KAAK,EAAEF,MAAO;MAAC,KAAK,EAAC;IAAc;MAAA;MAAA;MAAA;IAAA;EAAG;IAAA;IAAA;IAAA;EAAA,QAC9D;AAEV,CAAC;AAAC,GAzCIF,MAA6B;AAAA,KAA7BA,MAA6B;AA2CnC,eAAeA,MAAM;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}