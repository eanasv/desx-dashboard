{"ast":null,"code":"var _jsxFileName = \"/Users/eanas.v/Desktop/DESC-Projects/2023/DB-managmnt-app/dashboard/src/components/breadcrumbs/Breadcrumbs.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\nimport \"./Breadcrumbs.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Breadcrumbs = _ref => {\n  _s();\n  let {\n    paths\n  } = _ref;\n  const location = useLocation();\n  const history = useHistory();\n  const [breadcrumbNames, setBreadcrumbNames] = useState([]);\n  useEffect(() => {\n    const names = getBreadcrumbNames(location.pathname);\n    console.log(names);\n    setBreadcrumbNames(names);\n  }, [location]);\n  const getBreadcrumbNames = pathname => {\n    const segments = pathname.split(\"/\").filter(segment => segment !== \"\");\n    console.log(pathname, segments);\n\n    // Return the breadcrumb names based on the segments\n    if (segments.length === 0) {\n      return [\"\"];\n    } else {\n      // Get the last segment as the current breadcrumb name\n      const lastSegment = segments[segments.length - 1];\n      return [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"svg-image1\",\n          src: require(\"../../assets/home.svg\").default,\n          alt: \"home\",\n          width: \"19px\",\n          height: \"19px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), segments];\n    }\n  };\n\n  // const handleListItemClick = (itemName) => {\n  //   // Update the last breadcrumb name and navigate to the corresponding page\n  //   const newPathname = `${location.pathname}/${itemName}`;\n  //   const names = getBreadcrumbNames(newPathname);\n  //   setBreadcrumbNames(names);\n  //   history.push(newPathname);\n\n  // };\n\n  const customNames = {\n    entityDetails: \"entities index\",\n    categoryList: \"workforce index\"\n    // Add more custom names as needed\n  };\n\n  const capitalizeFirstLetter = string => {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"nav\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        children: \"Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), breadcrumbNames.map((path, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \" / \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this), index < breadcrumbNames.length - 1 ? /*#__PURE__*/_jsxDEV(Link, {\n          to: `/${paths.slice(0, index + 1).join(\"/\")}`,\n          children: capitalizeFirstLetter(path)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          children: capitalizeFirstLetter(path)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this)\n  // <nav>\n  //   <div className=\"breadcrumbs-container\">\n  //     <Link to=\"/\">\n  //       <img\n  //         className=\"svg-image1\"\n  //         src={require(\"../../assets/home.svg\").default}\n  //         alt=\"home\"\n  //         width=\"19px\"\n  //         height=\"19px\"\n  //       />\n  //     </Link>\n  //     {paths.map((path, index) => (\n  //       <React.Fragment key={index}>\n  //         <span> / </span>\n  //         {index < paths.length - 1 ? (\n  //           <Link to={path.url}>{path.label}</Link>\n  //         ) : (\n  //           <span>{path.label}</span>\n  //         )}\n  //       </React.Fragment>\n  //     ))}\n  //   </div>\n  // </nav>\n\n  // <nav>\n  //   <div className=\"breadcrumbs-container\">\n  //     {breadcrumbNames.map((name, index) => (\n  //       <div key={index}>\n  //         {index !== breadcrumbNames.length - 1 ? (\n  //           <Link to={`${breadcrumbNames.slice(0, index + 1).join(\"/\")}`}>\n  //             {name}\n  //           </Link>\n  //         ) : (\n  //           <span>{name.length != 0 ? \"/\" + name : \"\"}</span>\n  //         )}\n  //       </div>\n  //     ))}\n  //   </div>\n  // </nav>\n  ;\n};\n_s(Breadcrumbs, \"fnO8jWOGYjCWTi3T72JlPmCIgqE=\", false, function () {\n  return [useLocation, useHistory];\n});\n_c = Breadcrumbs;\nexport default Breadcrumbs;\nvar _c;\n$RefreshReg$(_c, \"Breadcrumbs\");","map":{"version":3,"names":["React","useEffect","useState","Link","useHistory","useLocation","Breadcrumbs","paths","location","history","breadcrumbNames","setBreadcrumbNames","names","getBreadcrumbNames","pathname","console","log","segments","split","filter","segment","length","lastSegment","require","default","customNames","entityDetails","categoryList","capitalizeFirstLetter","string","charAt","toUpperCase","slice","map","path","index","join"],"sources":["/Users/eanas.v/Desktop/DESC-Projects/2023/DB-managmnt-app/dashboard/src/components/breadcrumbs/Breadcrumbs.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\n\nimport \"./Breadcrumbs.css\";\n\nconst Breadcrumbs = ({ paths }) => {\n  const location = useLocation();\n  const history = useHistory();\n  const [breadcrumbNames, setBreadcrumbNames] = useState([]);\n\n  useEffect(() => {\n    const names = getBreadcrumbNames(location.pathname);\n    console.log(names);\n    setBreadcrumbNames(names);\n  }, [location]);\n\n  const getBreadcrumbNames = (pathname) => {\n    const segments = pathname.split(\"/\").filter((segment) => segment !== \"\");\n    console.log(pathname, segments);\n\n    // Return the breadcrumb names based on the segments\n    if (segments.length === 0) {\n      return [\"\"];\n    } else {\n      // Get the last segment as the current breadcrumb name\n      const lastSegment = segments[segments.length - 1];\n      return [\n        <Link to=\"/\">\n          <img\n            className=\"svg-image1\"\n            src={require(\"../../assets/home.svg\").default}\n            alt=\"home\"\n            width=\"19px\"\n            height=\"19px\"\n          />\n        </Link>,\n        segments,\n      ];\n    }\n  };\n\n  // const handleListItemClick = (itemName) => {\n  //   // Update the last breadcrumb name and navigate to the corresponding page\n  //   const newPathname = `${location.pathname}/${itemName}`;\n  //   const names = getBreadcrumbNames(newPathname);\n  //   setBreadcrumbNames(names);\n  //   history.push(newPathname);\n\n  // };\n\n  const customNames = {\n    entityDetails: \"entities index\",\n    categoryList: \"workforce index\",\n    // Add more custom names as needed\n  };\n\n  const capitalizeFirstLetter = (string) => {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  };\n\n  return (\n    <nav>\n      <div>\n        <Link to=\"/\">Home</Link>\n        {breadcrumbNames.map((path, index) => (\n          <React.Fragment key={index}>\n            <span> / </span>\n            {index < breadcrumbNames.length - 1 ? (\n              <Link to={`/${paths.slice(0, index + 1).join(\"/\")}`}>\n                {capitalizeFirstLetter(path)}\n              </Link>\n            ) : (\n              <span>{capitalizeFirstLetter(path)}</span>\n            )}\n          </React.Fragment>\n        ))}\n      </div>\n    </nav>\n    // <nav>\n    //   <div className=\"breadcrumbs-container\">\n    //     <Link to=\"/\">\n    //       <img\n    //         className=\"svg-image1\"\n    //         src={require(\"../../assets/home.svg\").default}\n    //         alt=\"home\"\n    //         width=\"19px\"\n    //         height=\"19px\"\n    //       />\n    //     </Link>\n    //     {paths.map((path, index) => (\n    //       <React.Fragment key={index}>\n    //         <span> / </span>\n    //         {index < paths.length - 1 ? (\n    //           <Link to={path.url}>{path.label}</Link>\n    //         ) : (\n    //           <span>{path.label}</span>\n    //         )}\n    //       </React.Fragment>\n    //     ))}\n    //   </div>\n    // </nav>\n\n    // <nav>\n    //   <div className=\"breadcrumbs-container\">\n    //     {breadcrumbNames.map((name, index) => (\n    //       <div key={index}>\n    //         {index !== breadcrumbNames.length - 1 ? (\n    //           <Link to={`${breadcrumbNames.slice(0, index + 1).join(\"/\")}`}>\n    //             {name}\n    //           </Link>\n    //         ) : (\n    //           <span>{name.length != 0 ? \"/\" + name : \"\"}</span>\n    //         )}\n    //       </div>\n    //     ))}\n    //   </div>\n    // </nav>\n  );\n};\n\nexport default Breadcrumbs;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}