{"ast":null,"code":"var _jsxFileName = \"/Users/eanas.v/Desktop/DESC-Projects/2023/DB-managmnt-app/dashboard/src/pages/Tabs/tab3/Chart3.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { BarChart } from \"../../../components/Graph/barChart/BarChart\";\nimport { getHttp } from \"../../../service/APIRequest\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Chart3 = _ref => {\n  _s();\n  let {\n    startDate,\n    endDate,\n    selectedEntityList,\n    entityList\n  } = _ref;\n  const [chartData, setchartData] = useState();\n  const [xAxis, setxAxis] = useState([]);\n  const [dateRangeProps, setdateRangeProps] = useState({\n    fromDate: startDate,\n    toDate: endDate\n  });\n  const [selectedEntities, setselectedEntities] = useState(selectedEntityList);\n  const [allEntityList, setallEntityList] = useState(entityList);\n  console.log(\"8*******\", selectedEntityList, selectedEntities);\n  useEffect(() => {\n    setallEntityList(allEntityList);\n    setselectedEntities(selectedEntityList);\n    getScoreOfSelectedEntity(startDate, endDate, selectedEntityList);\n  }, [selectedEntityList]);\n  //   const [options, setOptions] = useState({\n  //     chart: {\n  //       id: \"bar-chart\",\n  //     },\n  //     xaxis: {\n  //       categories: chartData?.map((company) => company.entityName),\n  //     },\n  //     plotOptions: {\n  //       bar: {\n  //         colors: {\n  //           ranges: [\n  //             {\n  //               from: -100,\n  //               to: 0,\n  //               color: \"#b70849\",\n  //             },\n  //             {\n  //               from: 0,\n  //               to: 100,\n  //               color: \"#1034a6\",\n  //             },\n  //           ],\n  //         },\n  //       },\n  //     },\n  //     dataLabels: {\n  //       enabled: true,\n  //       formatter: function (val, opts) {\n  //         const isPositive = val >= 0;\n  //         return isPositive ? `+${val}` : val.toString();\n  //       },\n  //     },\n  //   });\n  console.log(endDate, startDate, chartData);\n  useEffect(() => {\n    getScoreOfSelectedEntity(startDate, endDate);\n  }, []);\n  useEffect(() => {\n    getScoreOfSelectedEntity(startDate, endDate);\n    //setchartData(data);\n    setdateRangeProps({\n      fromDate: startDate,\n      toDate: endDate\n    });\n  }, [startDate, endDate]);\n  const getScoreOfSelectedEntity = async (startDate, endDate, selectedEntities) => {\n    var entityLists = selectedEntities;\n    if (entityLists.length == 0) {\n      entityLists = entityList.map(item => item.label);\n    }\n    const response = await getHttp(\"skills/skill-ranks\", {\n      startDate: dateRangeProps.fromDate || startDate,\n      endDate: dateRangeProps.toDate || endDate,\n      entityNames: entityLists.join(\",\")\n    });\n    drawChart(response);\n  };\n  async function drawChart(responseData) {\n    console.log(\"==------====\", responseData === null || responseData === void 0 ? void 0 : responseData.map(company => company.avg_score_diff));\n    var dataOfChart = [{\n      name: \"Improvement over last year\",\n      //chartData?.map((company) => company.entityName),\n      data: responseData === null || responseData === void 0 ? void 0 : responseData.map(company => company.avg_score_diff)\n    }];\n    //   name: responseData[0].companyName,\n    //   data: responseData[0].monthlyAverages.map((monthlyAverage) => {\n    //     return monthlyAverage.averageScore;\n    //   }),\n    // };\n    var xAxisdata = responseData === null || responseData === void 0 ? void 0 : responseData.map(company => company.entityName);\n    setxAxis(xAxisdata);\n    setchartData(responseData === null || responseData === void 0 ? void 0 : responseData.map(company => company.avg_score_diff));\n    //setchartData([1, 45, -5, 23]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(BarChart, {\n      data: chartData,\n      xAxis: xAxis\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n_s(Chart3, \"vn2JVuT6ATJmdHc7IjJMrR3NWWc=\");\n_c = Chart3;\nvar _c;\n$RefreshReg$(_c, \"Chart3\");","map":{"version":3,"names":["React","useEffect","useState","BarChart","getHttp","Chart3","startDate","endDate","selectedEntityList","entityList","chartData","setchartData","xAxis","setxAxis","dateRangeProps","setdateRangeProps","fromDate","toDate","selectedEntities","setselectedEntities","allEntityList","setallEntityList","console","log","getScoreOfSelectedEntity","entityLists","length","map","item","label","response","entityNames","join","drawChart","responseData","company","avg_score_diff","dataOfChart","name","data","xAxisdata","entityName"],"sources":["/Users/eanas.v/Desktop/DESC-Projects/2023/DB-managmnt-app/dashboard/src/pages/Tabs/tab3/Chart3.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { BarChart } from \"../../../components/Graph/barChart/BarChart\";\nimport Component1 from \"../../../components/test/Component1\";\nimport { getHttp } from \"../../../service/APIRequest\";\n\ninterface Chart3Props {\n  startDate: any;\n  endDate: any;\n  selectedEntityList?: any;\n  entityList?: any;\n}\nexport const Chart3: React.FC<Chart3Props> = ({\n  startDate,\n  endDate,\n  selectedEntityList,\n  entityList,\n}) => {\n  const [chartData, setchartData] = useState<any>();\n  const [xAxis, setxAxis] = useState([]);\n  const [dateRangeProps, setdateRangeProps] = useState({\n    fromDate: startDate,\n    toDate: endDate,\n  });\n  const [selectedEntities, setselectedEntities] = useState(selectedEntityList);\n  const [allEntityList, setallEntityList] = useState(entityList);\n  console.log(\"8*******\", selectedEntityList, selectedEntities);\n\n  useEffect(() => {\n    setallEntityList(allEntityList);\n    setselectedEntities(selectedEntityList);\n    getScoreOfSelectedEntity(startDate, endDate, selectedEntityList);\n  }, [selectedEntityList]);\n  //   const [options, setOptions] = useState({\n  //     chart: {\n  //       id: \"bar-chart\",\n  //     },\n  //     xaxis: {\n  //       categories: chartData?.map((company) => company.entityName),\n  //     },\n  //     plotOptions: {\n  //       bar: {\n  //         colors: {\n  //           ranges: [\n  //             {\n  //               from: -100,\n  //               to: 0,\n  //               color: \"#b70849\",\n  //             },\n  //             {\n  //               from: 0,\n  //               to: 100,\n  //               color: \"#1034a6\",\n  //             },\n  //           ],\n  //         },\n  //       },\n  //     },\n  //     dataLabels: {\n  //       enabled: true,\n  //       formatter: function (val, opts) {\n  //         const isPositive = val >= 0;\n  //         return isPositive ? `+${val}` : val.toString();\n  //       },\n  //     },\n  //   });\n  console.log(endDate, startDate, chartData);\n\n  useEffect(() => {\n    getScoreOfSelectedEntity(startDate, endDate);\n  }, []);\n\n  useEffect(() => {\n    getScoreOfSelectedEntity(startDate, endDate);\n    //setchartData(data);\n    setdateRangeProps({ fromDate: startDate, toDate: endDate });\n  }, [startDate, endDate]);\n\n  const getScoreOfSelectedEntity = async (\n    startDate,\n    endDate,\n    selectedEntities?\n  ) => {\n    var entityLists = selectedEntities;\n    if (entityLists.length == 0) {\n      entityLists = entityList.map((item) => item.label);\n    }\n    const response = await getHttp(\"skills/skill-ranks\", {\n      startDate: dateRangeProps.fromDate || startDate,\n      endDate: dateRangeProps.toDate || endDate,\n      entityNames: entityLists.join(\",\"),\n    });\n    drawChart(response);\n  };\n\n  async function drawChart(responseData?) {\n    console.log(\n      \"==------====\",\n      responseData?.map((company) => company.avg_score_diff)\n    );\n\n    var dataOfChart = [\n      {\n        name: \"Improvement over last year\", //chartData?.map((company) => company.entityName),\n        data: responseData?.map((company) => company.avg_score_diff),\n      },\n    ];\n    //   name: responseData[0].companyName,\n    //   data: responseData[0].monthlyAverages.map((monthlyAverage) => {\n    //     return monthlyAverage.averageScore;\n    //   }),\n    // };\n    var xAxisdata = responseData?.map((company) => company.entityName);\n    setxAxis(xAxisdata);\n    setchartData(responseData?.map((company) => company.avg_score_diff));\n    //setchartData([1, 45, -5, 23]);\n  }\n\n  return (\n    <div>\n      {/* <Component1 xAxis={xAxis} data={chartData} /> */}\n      <BarChart data={chartData} xAxis={xAxis} />\n    </div>\n  );\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,6CAA6C;AAEtE,SAASC,OAAO,QAAQ,6BAA6B;AAAC;AAQtD,OAAO,MAAMC,MAA6B,GAAG,QAKvC;EAAA;EAAA,IALwC;IAC5CC,SAAS;IACTC,OAAO;IACPC,kBAAkB;IAClBC;EACF,CAAC;EACC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,EAAO;EACjD,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACY,cAAc,EAAEC,iBAAiB,CAAC,GAAGb,QAAQ,CAAC;IACnDc,QAAQ,EAAEV,SAAS;IACnBW,MAAM,EAAEV;EACV,CAAC,CAAC;EACF,MAAM,CAACW,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGjB,QAAQ,CAACM,kBAAkB,CAAC;EAC5E,MAAM,CAACY,aAAa,EAAEC,gBAAgB,CAAC,GAAGnB,QAAQ,CAACO,UAAU,CAAC;EAC9Da,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEf,kBAAkB,EAAEU,gBAAgB,CAAC;EAE7DjB,SAAS,CAAC,MAAM;IACdoB,gBAAgB,CAACD,aAAa,CAAC;IAC/BD,mBAAmB,CAACX,kBAAkB,CAAC;IACvCgB,wBAAwB,CAAClB,SAAS,EAAEC,OAAO,EAAEC,kBAAkB,CAAC;EAClE,CAAC,EAAE,CAACA,kBAAkB,CAAC,CAAC;EACxB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAc,OAAO,CAACC,GAAG,CAAChB,OAAO,EAAED,SAAS,EAAEI,SAAS,CAAC;EAE1CT,SAAS,CAAC,MAAM;IACduB,wBAAwB,CAAClB,SAAS,EAAEC,OAAO,CAAC;EAC9C,CAAC,EAAE,EAAE,CAAC;EAENN,SAAS,CAAC,MAAM;IACduB,wBAAwB,CAAClB,SAAS,EAAEC,OAAO,CAAC;IAC5C;IACAQ,iBAAiB,CAAC;MAAEC,QAAQ,EAAEV,SAAS;MAAEW,MAAM,EAAEV;IAAQ,CAAC,CAAC;EAC7D,CAAC,EAAE,CAACD,SAAS,EAAEC,OAAO,CAAC,CAAC;EAExB,MAAMiB,wBAAwB,GAAG,OAC/BlB,SAAS,EACTC,OAAO,EACPW,gBAAiB,KACd;IACH,IAAIO,WAAW,GAAGP,gBAAgB;IAClC,IAAIO,WAAW,CAACC,MAAM,IAAI,CAAC,EAAE;MAC3BD,WAAW,GAAGhB,UAAU,CAACkB,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,KAAK,CAAC;IACpD;IACA,MAAMC,QAAQ,GAAG,MAAM1B,OAAO,CAAC,oBAAoB,EAAE;MACnDE,SAAS,EAAEQ,cAAc,CAACE,QAAQ,IAAIV,SAAS;MAC/CC,OAAO,EAAEO,cAAc,CAACG,MAAM,IAAIV,OAAO;MACzCwB,WAAW,EAAEN,WAAW,CAACO,IAAI,CAAC,GAAG;IACnC,CAAC,CAAC;IACFC,SAAS,CAACH,QAAQ,CAAC;EACrB,CAAC;EAED,eAAeG,SAAS,CAACC,YAAa,EAAE;IACtCZ,OAAO,CAACC,GAAG,CACT,cAAc,EACdW,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEP,GAAG,CAAEQ,OAAO,IAAKA,OAAO,CAACC,cAAc,CAAC,CACvD;IAED,IAAIC,WAAW,GAAG,CAChB;MACEC,IAAI,EAAE,4BAA4B;MAAE;MACpCC,IAAI,EAAEL,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEP,GAAG,CAAEQ,OAAO,IAAKA,OAAO,CAACC,cAAc;IAC7D,CAAC,CACF;IACD;IACA;IACA;IACA;IACA;IACA,IAAII,SAAS,GAAGN,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEP,GAAG,CAAEQ,OAAO,IAAKA,OAAO,CAACM,UAAU,CAAC;IAClE5B,QAAQ,CAAC2B,SAAS,CAAC;IACnB7B,YAAY,CAACuB,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEP,GAAG,CAAEQ,OAAO,IAAKA,OAAO,CAACC,cAAc,CAAC,CAAC;IACpE;EACF;;EAEA,oBACE;IAAA,uBAEE,QAAC,QAAQ;MAAC,IAAI,EAAE1B,SAAU;MAAC,KAAK,EAAEE;IAAM;MAAA;MAAA;MAAA;IAAA;EAAG;IAAA;IAAA;IAAA;EAAA,QACvC;AAEV,CAAC;AAAC,GAhHWP,MAA6B;AAAA,KAA7BA,MAA6B;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}