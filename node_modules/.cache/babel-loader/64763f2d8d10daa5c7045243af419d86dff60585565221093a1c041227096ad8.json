{"ast":null,"code":"var _jsxFileName = \"/Users/eanas.v/Desktop/DESC-Projects/2023/DB-managmnt-app/dashboard/src/components/popup/PopupModal.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./PopupModal.css\";\nimport { getSkillPercentage } from \"../../service/Service\";\nimport JobChart from \"../Graph/jobChart/JobChart\";\nimport Score from \"../score/Score\";\nimport { SubHeader } from \"../subHeader/SubHeader\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PopupModal = props => {\n  _s();\n  var _props$employeDetails3, _props$employeDetails4, _props$employeDetails5, _props$employeDetails6;\n  const [skillProgressValue, setskillProgressValue] = useState(0);\n  const [expandedRows, setExpandedRows] = useState({\n    technical: [],\n    soft: []\n  });\n  useEffect(() => {\n    getSkillValue();\n  }, []);\n  const getSkillValue = async () => {\n    var result = await getSkillPercentage(props.employeDetails.skills);\n    setskillProgressValue(result);\n  };\n  const getAchievedStatus = name => {\n    var _props$employeDetails;\n    const item = (_props$employeDetails = props.employeDetails) === null || _props$employeDetails === void 0 ? void 0 : _props$employeDetails.skills.find(obj => obj.name.toLowerCase() === name.toLowerCase());\n    return item ? item.achievedStatus : \"\";\n  };\n  const getEnrollmentStatus = name => {\n    var _props$employeDetails2;\n    const item = (_props$employeDetails2 = props.employeDetails) === null || _props$employeDetails2 === void 0 ? void 0 : _props$employeDetails2.trainingNeeds.find(obj => obj.linkedCompetency.toLowerCase() === name.toLowerCase());\n    return item ? item.courses : \"\";\n    //return item;\n  };\n\n  // const toggleAccordionRow = (index) => {\n  //   // if (expandedRows.includes(index)) {\n  //   //   setExpandedRows(expandedRows.filter((row) => row !== index));\n  //   // } else {\n  //   //   setExpandedRows([...expandedRows, index]);\n  //   // }\n  // }\n  const toggleAccordionRow = (index, tableType) => {\n    setExpandedRows(prevState => {\n      const updatedRows = {\n        ...prevState\n      };\n      if (updatedRows[tableType].includes(index)) {\n        updatedRows[tableType] = updatedRows[tableType].filter(row => row !== index);\n      } else {\n        updatedRows[tableType] = [...updatedRows[tableType], index];\n      }\n      return updatedRows;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"popup-overlay\",\n    onClick: props.closeModal,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"popup-content\",\n        children: [/*#__PURE__*/_jsxDEV(SubHeader, {\n          content: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"top-head\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"score-container\",\n              children: /*#__PURE__*/_jsxDEV(Score, {\n                score: props.employeDetails.employeeSkill\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"logo-container\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"heading main-heading\",\n              children: props.employeDetails.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }, this),\n          jobTree: /*#__PURE__*/_jsxDEV(JobChart, {\n            item: props.employeDetails.subcategories\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 22\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-content\",\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"popup-main-container\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"skill-progress\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"two-table-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"first-table\",\n              children: /*#__PURE__*/_jsxDEV(\"table\", {\n                className: \"table\",\n                children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                  children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                    className: \"each-column-border table-heading\",\n                    children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                      className: \"each-column-border\",\n                      children: \"Technical Skill\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 183,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      className: \"each-column-border\",\n                      children: \"Status\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 184,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      className: \"each-column-border\",\n                      children: \"Training\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 185,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 182,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 181,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                  children: (_props$employeDetails3 = props.employeDetails) === null || _props$employeDetails3 === void 0 ? void 0 : (_props$employeDetails4 = _props$employeDetails3.technicalSkills) === null || _props$employeDetails4 === void 0 ? void 0 : _props$employeDetails4.map((item, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n                    children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                        className: \"each-column-border skill-name\",\n                        children: item\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 196,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        className: \"each-column-border\",\n                        style: {\n                          backgroundColor: getAchievedStatus(item) === \"Achieved\" ? \"green\" : \"red\"\n                        }\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 199,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        className: \"each-column-border  skill-name\",\n                        onClick: e => {\n                          e.stopPropagation();\n                          toggleAccordionRow(index, \"technical\");\n                        },\n                        children: getEnrollmentStatus(item) ? \"Training details\" : \"NA\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 208,\n                        columnNumber: 29\n                      }, this)]\n                    }, index, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 192,\n                      columnNumber: 27\n                    }, this), getEnrollmentStatus(item) && expandedRows.technical.includes(index) && /*#__PURE__*/_jsxDEV(\"tr\", {\n                      className: `accordion-content ${expandedRows.technical.includes(index) ? \"open\" : \"\"}`,\n                      children: /*#__PURE__*/_jsxDEV(\"td\", {\n                        colSpan: 4,\n                        className: \"each-column-border \",\n                        children: getEnrollmentStatus(item) && /*#__PURE__*/_jsxDEV(\"span\", {\n                          children: getEnrollmentStatus(item).map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                            className: \"flex-box\",\n                            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                              className: \"bold-text\",\n                              children: index + 1 + \"  . \"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 238,\n                              columnNumber: 45\n                            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                              className: \"course-list\",\n                              children: item.course\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 241,\n                              columnNumber: 45\n                            }, this)]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 237,\n                            columnNumber: 43\n                          }, this))\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 234,\n                          columnNumber: 37\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 232,\n                        columnNumber: 33\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 225,\n                      columnNumber: 31\n                    }, this)]\n                  }, index, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 191,\n                    columnNumber: 25\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 188,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"first-table\",\n              children: /*#__PURE__*/_jsxDEV(\"table\", {\n                className: \"table\",\n                children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                  children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                    className: \"table-heading\",\n                    children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                      className: \"each-column-border\",\n                      children: \"Soft Skill\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 262,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      className: \"each-column-border\",\n                      children: \"Status\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 263,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      className: \"each-column-border\",\n                      children: \"Training\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 264,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 261,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 260,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                  children: (_props$employeDetails5 = props.employeDetails) === null || _props$employeDetails5 === void 0 ? void 0 : (_props$employeDetails6 = _props$employeDetails5.softSkills) === null || _props$employeDetails6 === void 0 ? void 0 : _props$employeDetails6.map((item, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n                    children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                        className: \"each-column-border  skill-name\",\n                        children: item\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 274,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        style: {\n                          backgroundColor: getAchievedStatus(item) === \"Achieved\" ? \"green\" : \"red\"\n                        }\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 277,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        className: \"each-column-border  skill-name\",\n                        onClick: e => {\n                          e.stopPropagation();\n                          toggleAccordionRow(index, \"soft\");\n                        },\n                        children: getEnrollmentStatus(item) ? \"Training details\" : \"NA\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 285,\n                        columnNumber: 27\n                      }, this)]\n                    }, index, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 270,\n                      columnNumber: 25\n                    }, this), getEnrollmentStatus(item) && expandedRows.soft.includes(index) && /*#__PURE__*/_jsxDEV(\"tr\", {\n                      className: `accordion-content ${expandedRows.soft.includes(index) ? \"open\" : \"\"}`,\n                      children: /*#__PURE__*/_jsxDEV(\"td\", {\n                        colSpan: 4,\n                        className: \"each-column-border\",\n                        children: getEnrollmentStatus(item) && /*#__PURE__*/_jsxDEV(\"span\", {\n                          children: getEnrollmentStatus(item).map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                            className: \"flex-box\",\n                            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                              className: \"bold-text\",\n                              children: index + 1 + \"  . \"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 313,\n                              columnNumber: 43\n                            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                              className: \"course-list\",\n                              children: item.course\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 316,\n                              columnNumber: 43\n                            }, this)]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 312,\n                            columnNumber: 41\n                          }, this))\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 309,\n                          columnNumber: 35\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 307,\n                        columnNumber: 31\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 302,\n                      columnNumber: 29\n                    }, this)]\n                  }, index, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 269,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 267,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 259,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"actions\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button\",\n            onClick: () => {},\n            children: \"close modal\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n  //     <Popup trigger={<button className=\"button\"> Open Modal </button>} modal>\n  //       <span> Modal content </span>\n  //     </Popup>\n  //   );\n};\n_s(PopupModal, \"BiiUDJGrFzGgFfd6+TWnxFcG/bk=\");\n_c = PopupModal;\nexport default PopupModal;\nvar _c;\n$RefreshReg$(_c, \"PopupModal\");","map":{"version":3,"names":["React","useEffect","useState","getSkillPercentage","JobChart","Score","SubHeader","PopupModal","props","skillProgressValue","setskillProgressValue","expandedRows","setExpandedRows","technical","soft","getSkillValue","result","employeDetails","skills","getAchievedStatus","name","item","find","obj","toLowerCase","achievedStatus","getEnrollmentStatus","trainingNeeds","linkedCompetency","courses","toggleAccordionRow","index","tableType","prevState","updatedRows","includes","filter","row","closeModal","employeeSkill","subcategories","technicalSkills","map","backgroundColor","e","stopPropagation","course","softSkills"],"sources":["/Users/eanas.v/Desktop/DESC-Projects/2023/DB-managmnt-app/dashboard/src/components/popup/PopupModal.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./PopupModal.css\";\nimport ProgressCircle from \"../progressCircle/ProgressCircle\";\nimport { getSkillPercentage } from \"../../service/Service\";\nimport ProgressBar from \"../progressCircle/ProgressBar\";\nimport JobChart from \"../Graph/jobChart/JobChart\";\nimport Score from \"../score/Score\";\nimport { SubHeader } from \"../subHeader/SubHeader\";\n\nconst PopupModal = (props) => {\n  const [skillProgressValue, setskillProgressValue] = useState<any>(0);\n  const [expandedRows, setExpandedRows] = useState({ technical: [], soft: [] });\n\n  useEffect(() => {\n    getSkillValue();\n  }, []);\n\n  const getSkillValue = async () => {\n    var result = await getSkillPercentage(props.employeDetails.skills);\n    setskillProgressValue(result);\n  };\n\n  const getAchievedStatus = (name) => {\n    const item = props.employeDetails?.skills.find(\n      (obj) => obj.name.toLowerCase() === name.toLowerCase()\n    );\n    return item ? item.achievedStatus : \"\";\n  };\n\n  const getEnrollmentStatus = (name) => {\n    const item = props.employeDetails?.trainingNeeds.find(\n      (obj) => obj.linkedCompetency.toLowerCase() === name.toLowerCase()\n    );\n    return item ? item.courses : \"\";\n    //return item;\n  };\n\n  // const toggleAccordionRow = (index) => {\n  //   // if (expandedRows.includes(index)) {\n  //   //   setExpandedRows(expandedRows.filter((row) => row !== index));\n  //   // } else {\n  //   //   setExpandedRows([...expandedRows, index]);\n  //   // }\n  // }\n  const toggleAccordionRow = (index, tableType) => {\n    setExpandedRows((prevState) => {\n      const updatedRows = { ...prevState };\n      if (updatedRows[tableType].includes(index)) {\n        updatedRows[tableType] = updatedRows[tableType].filter(\n          (row) => row !== index\n        );\n      } else {\n        updatedRows[tableType] = [...updatedRows[tableType], index];\n      }\n      return updatedRows;\n    });\n  };\n\n  return (\n    <div className=\"popup-overlay\" onClick={props.closeModal}>\n      <div className=\"modal\">\n        <div className=\"popup-content\">\n          {/* <button className=\"close\" onClick={props.closeModal}>\n          &times;\n        </button> */}\n          {/* <div className=\"subheader-container\">\n          <div className=\"flex-box\">\n            <div className=\"flex-header\"> {props.employeDetails.name} </div>\n          </div>\n          <div className=\"score-div1 entity-score orange-value\">\n            <Score score={props.employeDetails.employeeSkill} />\n          </div>\n          <JobChart item={props.employeDetails.subcategories} />\n        </div> */}\n          <SubHeader\n            content={\n              <div className=\"top-head\">\n                <div className=\"score-container\">\n                  <Score score={props.employeDetails.employeeSkill} />\n                </div>\n\n                <div className=\"logo-container\"></div>\n                <div className=\"heading main-heading\">\n                  {props.employeDetails.name}\n                </div>\n              </div>\n            }\n            jobTree={<JobChart item={props.employeDetails.subcategories} />}\n          />\n          <div className=\"modal-content\">\n            {\" \"}\n            <div className=\"popup-main-container\">\n              {/* <div className=\"full-width\">\n              <div className=\"items\">\n                <div className=\"first-item\">Category</div>:\n                <div className=\"second-item uppercase\">\n                  {props.employeDetails.category}\n                </div>\n              </div>\n              <div className=\"items\">\n                <div className=\"first-item\">subCategory</div>:\n                <div className=\"second-item\">\n                  {props.employeDetails.subCategory}\n                </div>\n              </div>\n              <div className=\"items\">\n                <div className=\"first-item\">Job Role</div>:\n                <div className=\"second-item\">{props.employeDetails.job}</div>\n              </div>\n            </div> */}\n              <div className=\"skill-progress\">\n                {/* <ProgressCircle\n                progress={props.employeDetails.employeeSkill}\n                size={90}\n                strokeWidth={3}\n                circleOneStroke=\"white\"\n                circleTwoStroke=\"#2b6cb0\"\n                reverse=\"false\"\n              /> */}\n              </div>\n            </div>\n            {/* <div className=\"popup-skill-container\">\n            <div className=\"skill-full-width\">\n              <div className=\"skill-items\">\n                <div className=\"flex\">\n                  <div className=\"first-item skill-heading\">technical</div>\n                  <div className=\"first-item skill-heading\">Soft</div>\n                </div>\n                <div className=\"skill-item-container\">\n                  <div>\n                    {props.employeDetails?.technicalSkills?.map(\n                      (item, index) => (\n                        <span\n                          className=\"items\"\n                          key={index}\n                          style={{\n                            color:\n                              getAchievedStatus(item) === \"Achieved\"\n                                ? \"green\"\n                                : \"red\",\n                          }}\n                        >\n                          {item}{\" \"}\n                          {getEnrollmentStatus(item) &&\n                            `(${getEnrollmentStatus(item)})`}\n                        </span>\n                      )\n                    )}\n                  </div>\n\n                  <div className=\"skill-item-container\">\n                    <div>\n                      {props.employeDetails?.softSkills?.map((item, index) => (\n                        <span\n                          className=\"items\"\n                          key={index}\n                          style={{\n                            color:\n                              getAchievedStatus(item) === \"Achieved\"\n                                ? \"green\"\n                                : \"red\",\n                          }}\n                        >\n                          {item}{\" \"}\n                          {getEnrollmentStatus(item) &&\n                            `(${getEnrollmentStatus(item)})`}\n                        </span>\n                      ))}\n                    </div>\n                  </div>\n\n                 \n                </div>\n              </div>\n            </div>\n          </div> */}\n            <br />\n            <div className=\"two-table-container\">\n              <div className=\"first-table\">\n                <table className=\"table\">\n                  <thead>\n                    <tr className=\"each-column-border table-heading\">\n                      <th className=\"each-column-border\">Technical Skill</th>\n                      <th className=\"each-column-border\">Status</th>\n                      <th className=\"each-column-border\">Training</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {props.employeDetails?.technicalSkills?.map(\n                      (item, index) => (\n                        <React.Fragment key={index}>\n                          <tr\n                            key={index}\n                            // className={index % 2 === 0 ? \"even-row\" : \"odd-row\"}\n                          >\n                            <td className=\"each-column-border skill-name\">\n                              {item}\n                            </td>\n                            <td\n                              className=\"each-column-border\"\n                              style={{\n                                backgroundColor:\n                                  getAchievedStatus(item) === \"Achieved\"\n                                    ? \"green\"\n                                    : \"red\",\n                              }}\n                            ></td>\n                            <td\n                              className=\"each-column-border  skill-name\"\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                toggleAccordionRow(index, \"technical\");\n                              }}\n                            >\n                              {/* {getEnrollmentStatus(item) && (\n                            <span>{getEnrollmentStatus(item)}</span>\n                          )} */}\n                              {getEnrollmentStatus(item)\n                                ? \"Training details\"\n                                : \"NA\"}\n                            </td>\n                          </tr>\n                          {getEnrollmentStatus(item) &&\n                            expandedRows.technical.includes(index) && (\n                              <tr\n                                className={`accordion-content ${\n                                  expandedRows.technical.includes(index)\n                                    ? \"open\"\n                                    : \"\"\n                                }`}\n                              >\n                                <td colSpan={4} className=\"each-column-border \">\n                                  {getEnrollmentStatus(item) && (\n                                    <span>\n                                      {getEnrollmentStatus(item).map(\n                                        (item, index) => (\n                                          <div className=\"flex-box\">\n                                            <div className=\"bold-text\">\n                                              {index + 1 + \"  . \"}\n                                            </div>\n                                            <div className=\"course-list\">\n                                              {item.course}\n                                            </div>\n                                          </div>\n                                        )\n                                      )}\n                                    </span>\n                                  )}\n                                </td>\n                              </tr>\n                            )}\n                        </React.Fragment>\n                      )\n                    )}\n                  </tbody>\n                </table>\n              </div>\n              <div className=\"first-table\">\n                <table className=\"table\">\n                  <thead>\n                    <tr className=\"table-heading\">\n                      <th className=\"each-column-border\">Soft Skill</th>\n                      <th className=\"each-column-border\">Status</th>\n                      <th className=\"each-column-border\">Training</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {props.employeDetails?.softSkills?.map((item, index) => (\n                      <React.Fragment key={index}>\n                        <tr\n                          key={index}\n                          // className={index % 2 === 0 ? \"even-row\" : \"odd-row\"}\n                        >\n                          <td className=\"each-column-border  skill-name\">\n                            {item}\n                          </td>\n                          <td\n                            style={{\n                              backgroundColor:\n                                getAchievedStatus(item) === \"Achieved\"\n                                  ? \"green\"\n                                  : \"red\",\n                            }}\n                          ></td>\n                          <td\n                            className=\"each-column-border  skill-name\"\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              toggleAccordionRow(index, \"soft\");\n                            }}\n                          >\n                            {/* {getEnrollmentStatus(item) && (\n                          <span>{getEnrollmentStatus(item)}</span>\n                        )} */}\n                            {getEnrollmentStatus(item)\n                              ? \"Training details\"\n                              : \"NA\"}\n                          </td>\n                        </tr>\n                        {getEnrollmentStatus(item) &&\n                          expandedRows.soft.includes(index) && (\n                            <tr\n                              className={`accordion-content ${\n                                expandedRows.soft.includes(index) ? \"open\" : \"\"\n                              }`}\n                            >\n                              <td colSpan={4} className=\"each-column-border\">\n                                {getEnrollmentStatus(item) && (\n                                  <span>\n                                    {getEnrollmentStatus(item).map(\n                                      (item, index) => (\n                                        <div className=\"flex-box\">\n                                          <div className=\"bold-text\">\n                                            {index + 1 + \"  . \"}\n                                          </div>\n                                          <div className=\"course-list\">\n                                            {item.course}\n                                          </div>\n                                        </div>\n                                      )\n                                    )}\n                                  </span>\n                                )}\n                              </td>\n                            </tr>\n                          )}\n                      </React.Fragment>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>{\" \"}\n          {/* <div className=\"second-item\">\n                        <ProgressBar score={item.score} />\n                      </div> */}\n          <div className=\"actions\">\n            <button className=\"button\" onClick={() => {}}>\n              close modal\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n  //     <Popup trigger={<button className=\"button\"> Open Modal </button>} modal>\n  //       <span> Modal content </span>\n  //     </Popup>\n  //   );\n};\n\nexport default PopupModal;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}