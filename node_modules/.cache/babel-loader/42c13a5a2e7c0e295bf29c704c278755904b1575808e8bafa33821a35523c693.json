{"ast":null,"code":"var _jsxFileName = \"/Users/eanas.v/Desktop/DESC-Projects/2023/DB-managmnt-app/dashboard/src/pages/Tabs/tab3/Chart2.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport DropDown from \"../../../components/dropDown/DropDown\";\nimport LineChart from \"../../../components/Graph/lineChart/LineChart\";\nimport { getHttp } from \"../../../service/APIRequest\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chart2 = _ref => {\n  _s();\n  let {\n    startDate,\n    endDate,\n    entityListForDropDown\n  } = _ref;\n  const [selectList1Entity, setSelectList1Entity] = useState(entityListForDropDown);\n  const [selectList2Entity, setSelectList2Entity] = useState(entityListForDropDown);\n  const [chartData, setchartData] = useState([]);\n  const [xAxis, setxAxis] = useState([]);\n  const [dateRangeProps, setdateRangeProps] = useState({\n    fromDate: startDate,\n    toDate: endDate\n  });\n  const [dropdownValues, setdropdownValues] = useState({\n    firstDValue: \"\",\n    //firstDropDownValue,\n    secondDValue: \"\" //secondDropDownValue,\n  });\n\n  useEffect(() => {\n    setSelectList1Entity(entityListForDropDown);\n    setSelectList2Entity(entityListForDropDown);\n    getScoreOfSelectedEntities(dropdownValues.firstDValue, dropdownValues.secondDValue);\n    getScoreOfSelectedEntities(dropdownValues.secondDValue, dropdownValues.secondDValue);\n  }, [startDate, endDate, dateRangeProps]);\n  useEffect(() => {\n    setSelectList1Entity(entityListForDropDown);\n    setSelectList2Entity(entityListForDropDown);\n  }, [entityListForDropDown]);\n\n  // const getEntityList = async () => {\n  //   const response = await getHttp(\"entity/getAll\");\n  //   await setSelectList1Entity(response);\n  //   await setSelectList2Entity(response);\n  //   //setentityListForDropDown(response);\n  // };\n\n  function handleChange1Value(selectedOption) {\n    setdropdownValues(prevState => ({\n      ...prevState,\n      firstDValue: selectedOption.label\n    }));\n    if (dropdownValues.secondDValue) {\n      getScoreOfSelectedEntities(selectedOption.label, dropdownValues.secondDValue);\n    }\n    //getScoreOfSelectedEntity(selectedOption.label);\n  }\n\n  function handleChange2Value(selectedOption) {\n    setdropdownValues(prevState => ({\n      ...prevState,\n      secondDValue: selectedOption.label\n    }));\n    if (dropdownValues.firstDValue) {\n      getScoreOfSelectedEntities(dropdownValues.firstDValue, selectedOption.label);\n    }\n    //getScoreOfSelectedEntity(selectedOption.label);\n  }\n\n  // async function drawChart(responseData?) {\n  //   var dataOfOneChart = {\n  //     name: responseData[0]?.companyName,\n  //     data: responseData[0]?.monthlyAverages?.map((monthlyAverage) => {\n  //       return monthlyAverage.averageScore;\n  //     }),\n  //   };\n  //   var xAxisdata = responseData[0].monthlyAverages?.map((monthlyAverage) => {\n  //     return monthlyAverage.month;\n  //   });\n  //   setxAxis(xAxisdata);\n  //   setchartData((prevState) => [...prevState, dataOfOneChart]);\n  // }\n\n  function drawChart(responseData1, responseData2) {\n    var _responseData1$, _responseData1$2, _responseData1$2$mont, _responseData2$, _responseData2$2, _responseData2$2$mont, _responseData1$0$mont;\n    const dataOfOneChart1 = {\n      name: (_responseData1$ = responseData1[0]) === null || _responseData1$ === void 0 ? void 0 : _responseData1$.companyName,\n      data: (_responseData1$2 = responseData1[0]) === null || _responseData1$2 === void 0 ? void 0 : (_responseData1$2$mont = _responseData1$2.monthlyAverages) === null || _responseData1$2$mont === void 0 ? void 0 : _responseData1$2$mont.map(monthlyAverage => {\n        return monthlyAverage.averageScore;\n      })\n    };\n    const dataOfOneChart2 = {\n      name: (_responseData2$ = responseData2[0]) === null || _responseData2$ === void 0 ? void 0 : _responseData2$.companyName,\n      data: (_responseData2$2 = responseData2[0]) === null || _responseData2$2 === void 0 ? void 0 : (_responseData2$2$mont = _responseData2$2.monthlyAverages) === null || _responseData2$2$mont === void 0 ? void 0 : _responseData2$2$mont.map(monthlyAverage => {\n        return monthlyAverage.averageScore;\n      })\n    };\n    const xAxisData = (_responseData1$0$mont = responseData1[0].monthlyAverages) === null || _responseData1$0$mont === void 0 ? void 0 : _responseData1$0$mont.map(monthlyAverage => {\n      return monthlyAverage.month;\n    });\n    setxAxis(xAxisData);\n    setchartData([dataOfOneChart1, dataOfOneChart2]);\n  }\n  const getScoreOfSelectedEntities = async (entity1, entity2) => {\n    // if (entityName) {\n    //   const response = await getHttp(\"skills/averageScoreOfEntity\", {\n    //     startDate: startDate,\n    //     endDate: endDate,\n    //     entityName: entityName,\n    //   });\n    //   drawChart(response);\n    // } else {\n    //   drawChart();\n    // }\n\n    if (entity1 && entity2) {\n      const response1 = await getHttp(\"skills/averageScoreOfEntity\", {\n        startDate: startDate,\n        endDate: endDate,\n        entityName: entity1\n      });\n      const response2 = await getHttp(\"skills/averageScoreOfEntity\", {\n        startDate: startDate,\n        endDate: endDate,\n        entityName: entity2\n      });\n      drawChart(response1, response2);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"drop-down-tab3\",\n      children: [/*#__PURE__*/_jsxDEV(DropDown, {\n        mainList: selectList1Entity,\n        name: \"First Entity\",\n        onChangeDropDownItem: handleChange1Value,\n        isMulti: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DropDown, {\n        mainList: selectList2Entity,\n        name: \"Second Entity\",\n        onChangeDropDownItem: handleChange2Value,\n        isMulti: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LineChart, {\n      data: chartData,\n      xAxis: xAxis,\n      title: \"Compare 2 entities\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n};\n_s(Chart2, \"K0dASaBbAR5a9u3AOVmBh2hZoEs=\");\n_c = Chart2;\nexport default Chart2;\nvar _c;\n$RefreshReg$(_c, \"Chart2\");","map":{"version":3,"names":["React","useEffect","useState","DropDown","LineChart","getHttp","Chart2","startDate","endDate","entityListForDropDown","selectList1Entity","setSelectList1Entity","selectList2Entity","setSelectList2Entity","chartData","setchartData","xAxis","setxAxis","dateRangeProps","setdateRangeProps","fromDate","toDate","dropdownValues","setdropdownValues","firstDValue","secondDValue","getScoreOfSelectedEntities","handleChange1Value","selectedOption","prevState","label","handleChange2Value","drawChart","responseData1","responseData2","dataOfOneChart1","name","companyName","data","monthlyAverages","map","monthlyAverage","averageScore","dataOfOneChart2","xAxisData","month","entity1","entity2","response1","entityName","response2"],"sources":["/Users/eanas.v/Desktop/DESC-Projects/2023/DB-managmnt-app/dashboard/src/pages/Tabs/tab3/Chart2.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport DropDown from \"../../../components/dropDown/DropDown\";\nimport LineChart from \"../../../components/Graph/lineChart/LineChart\";\nimport { getHttp } from \"../../../service/APIRequest\";\n\ninterface Chart2Props {\n  startDate: any;\n  endDate: any;\n  entityListForDropDown: any;\n}\nconst Chart2: React.FC<Chart2Props> = ({\n  startDate,\n  endDate,\n  entityListForDropDown,\n}) => {\n  const [selectList1Entity, setSelectList1Entity] = useState(\n    entityListForDropDown\n  );\n  const [selectList2Entity, setSelectList2Entity] = useState(\n    entityListForDropDown\n  );\n  const [chartData, setchartData] = useState([]);\n  const [xAxis, setxAxis] = useState([]);\n  const [dateRangeProps, setdateRangeProps] = useState({\n    fromDate: startDate,\n    toDate: endDate,\n  });\n  const [dropdownValues, setdropdownValues] = useState({\n    firstDValue: \"\", //firstDropDownValue,\n    secondDValue: \"\", //secondDropDownValue,\n  });\n\n  useEffect(() => {\n    setSelectList1Entity(entityListForDropDown);\n    setSelectList2Entity(entityListForDropDown);\n    getScoreOfSelectedEntities(\n      dropdownValues.firstDValue,\n      dropdownValues.secondDValue\n    );\n    getScoreOfSelectedEntities(\n      dropdownValues.secondDValue,\n      dropdownValues.secondDValue\n    );\n  }, [startDate, endDate, dateRangeProps]);\n\n  useEffect(() => {\n    setSelectList1Entity(entityListForDropDown);\n    setSelectList2Entity(entityListForDropDown);\n  }, [entityListForDropDown]);\n\n  // const getEntityList = async () => {\n  //   const response = await getHttp(\"entity/getAll\");\n  //   await setSelectList1Entity(response);\n  //   await setSelectList2Entity(response);\n  //   //setentityListForDropDown(response);\n  // };\n\n  function handleChange1Value(selectedOption) {\n    setdropdownValues((prevState) => ({\n      ...prevState,\n      firstDValue: selectedOption.label,\n    }));\n    if (dropdownValues.secondDValue) {\n      getScoreOfSelectedEntities(\n        selectedOption.label,\n        dropdownValues.secondDValue\n      );\n    }\n    //getScoreOfSelectedEntity(selectedOption.label);\n  }\n\n  function handleChange2Value(selectedOption) {\n    setdropdownValues((prevState) => ({\n      ...prevState,\n      secondDValue: selectedOption.label,\n    }));\n    if (dropdownValues.firstDValue) {\n      getScoreOfSelectedEntities(\n        dropdownValues.firstDValue,\n        selectedOption.label\n      );\n    }\n    //getScoreOfSelectedEntity(selectedOption.label);\n  }\n\n  // async function drawChart(responseData?) {\n  //   var dataOfOneChart = {\n  //     name: responseData[0]?.companyName,\n  //     data: responseData[0]?.monthlyAverages?.map((monthlyAverage) => {\n  //       return monthlyAverage.averageScore;\n  //     }),\n  //   };\n  //   var xAxisdata = responseData[0].monthlyAverages?.map((monthlyAverage) => {\n  //     return monthlyAverage.month;\n  //   });\n  //   setxAxis(xAxisdata);\n  //   setchartData((prevState) => [...prevState, dataOfOneChart]);\n  // }\n\n  function drawChart(responseData1, responseData2) {\n    const dataOfOneChart1 = {\n      name: responseData1[0]?.companyName,\n      data: responseData1[0]?.monthlyAverages?.map((monthlyAverage) => {\n        return monthlyAverage.averageScore;\n      }),\n    };\n    const dataOfOneChart2 = {\n      name: responseData2[0]?.companyName,\n      data: responseData2[0]?.monthlyAverages?.map((monthlyAverage) => {\n        return monthlyAverage.averageScore;\n      }),\n    };\n    const xAxisData = responseData1[0].monthlyAverages?.map(\n      (monthlyAverage) => {\n        return monthlyAverage.month;\n      }\n    );\n    setxAxis(xAxisData);\n    setchartData([dataOfOneChart1, dataOfOneChart2]);\n  }\n\n  const getScoreOfSelectedEntities = async (entity1, entity2) => {\n    // if (entityName) {\n    //   const response = await getHttp(\"skills/averageScoreOfEntity\", {\n    //     startDate: startDate,\n    //     endDate: endDate,\n    //     entityName: entityName,\n    //   });\n    //   drawChart(response);\n    // } else {\n    //   drawChart();\n    // }\n\n    if (entity1 && entity2) {\n      const response1 = await getHttp(\"skills/averageScoreOfEntity\", {\n        startDate: startDate,\n        endDate: endDate,\n        entityName: entity1,\n      });\n      const response2 = await getHttp(\"skills/averageScoreOfEntity\", {\n        startDate: startDate,\n        endDate: endDate,\n        entityName: entity2,\n      });\n      drawChart(response1, response2);\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"drop-down-tab3\">\n        <DropDown\n          mainList={selectList1Entity}\n          name=\"First Entity\"\n          onChangeDropDownItem={handleChange1Value}\n          isMulti={false}\n        />\n        <DropDown\n          mainList={selectList2Entity}\n          name=\"Second Entity\"\n          onChangeDropDownItem={handleChange2Value}\n          isMulti={false}\n        />\n      </div>\n      <LineChart data={chartData} xAxis={xAxis} title=\"Compare 2 entities\" />\n    </div>\n  );\n};\n\nexport default Chart2;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}