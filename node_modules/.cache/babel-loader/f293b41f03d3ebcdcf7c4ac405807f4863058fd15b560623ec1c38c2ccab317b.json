{"ast":null,"code":"var _jsxFileName = \"/Users/eanas.v/Desktop/DESC-Projects/2023/DB-managmnt-app/dashboard/src/components/Graph/donutChart/Doughnut.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Chart from \"react-apexcharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Doughnut = _ref => {\n  _s();\n  let {\n    details,\n    heading,\n    multiLayer,\n    showLegend\n  } = _ref;\n  //console.log(details);\n  const [label, setLabel] = useState(details === null || details === void 0 ? void 0 : details.map(item => item.category));\n  const [dataSeries, setdataSeries] = useState(details === null || details === void 0 ? void 0 : details.map(item => item.count));\n  const [option, setOption] = useState({\n    chart: {\n      height: 400 // set the height to 400px\n    },\n\n    labels: details === null || details === void 0 ? void 0 : details.map(item => item.category),\n    legend: {\n      show: showLegend,\n      labels: {\n        colors: \"#333\",\n        useSeriesColors: false,\n        formatter: function (value, _ref2) {\n          let {\n            seriesIndex,\n            w\n          } = _ref2;\n          return details.labels[seriesIndex] + \": \" + value + \"%\";\n        }\n      },\n      //labels: details?.map((item) => item.category),\n      tooltip: {\n        y: {\n          formatter: function (val) {\n            return val + \".00\" + \" Rs\";\n          },\n          title: {\n            formatter: function (seriesName) {\n              return \"# of Employees in \";\n            }\n          }\n        }\n      }\n    },\n    // title: {\n    //   text: \"Dubai Skills %\",\n    //   style: {\n    //     fontSize: \"14px\",\n    //     fontWeight: \"bold\",\n    //     fontFamily: \"Bukra\",\n    //     color: \"red\",\n    //   },\n    // },\n    stroke: {\n      width: 2,\n      colors: [\"#000\"]\n    }\n  });\n  useEffect(() => {\n    setLabel(details === null || details === void 0 ? void 0 : details.map(item => item.category));\n    setdataSeries(details === null || details === void 0 ? void 0 : details.map(item => item.count));\n    setOption(prevState => ({\n      ...prevState,\n      //legend: { show: showLegend },\n      labels: details === null || details === void 0 ? void 0 : details.map(item => item.category)\n    }));\n  }, [details]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"donut-heading\",\n      hidden: (details === null || details === void 0 ? void 0 : details.length) <= 0\n      //className={multiLayer ? \"center-heading\" : \"\"}\n      ,\n      children: heading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chart, {\n      options: option,\n      series: dataSeries,\n      type: \"donut\",\n      width: 400\n      //height={600}\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(Doughnut, \"gIrJDmZmgUpjppTgTc6NhjBQAEg=\");\n_c = Doughnut;\nexport default Doughnut;\nvar _c;\n$RefreshReg$(_c, \"Doughnut\");","map":{"version":3,"names":["React","useEffect","useState","Chart","Doughnut","details","heading","multiLayer","showLegend","label","setLabel","map","item","category","dataSeries","setdataSeries","count","option","setOption","chart","height","labels","legend","show","colors","useSeriesColors","formatter","value","seriesIndex","w","tooltip","y","val","title","seriesName","stroke","width","prevState","length"],"sources":["/Users/eanas.v/Desktop/DESC-Projects/2023/DB-managmnt-app/dashboard/src/components/Graph/donutChart/Doughnut.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Chart from \"react-apexcharts\";\n\ninterface donutChartInterface {\n  details?: any;\n  heading?: String;\n  multiLayer?: boolean;\n  showLegend: boolean;\n}\n\nconst Doughnut: React.FC<donutChartInterface> = ({\n  details,\n  heading,\n  multiLayer,\n  showLegend,\n}) => {\n  //console.log(details);\n  const [label, setLabel] = useState(details?.map((item) => item.category));\n  const [dataSeries, setdataSeries] = useState(\n    details?.map((item) => item.count)\n  );\n  const [option, setOption] = useState<any>({\n    chart: {\n      height: 400, // set the height to 400px\n    },\n    labels: details?.map((item) => item.category),\n    legend: {\n      show: showLegend,\n      labels: {\n        colors: \"#333\",\n        useSeriesColors: false,\n        formatter: function (value, { seriesIndex, w }) {\n          return details.labels[seriesIndex] + \": \" + value + \"%\";\n        },\n      },\n      //labels: details?.map((item) => item.category),\n      tooltip: {\n        y: {\n          formatter: function (val) {\n            return val + \".00\" + \" Rs\";\n          },\n          title: {\n            formatter: function (seriesName) {\n              return \"# of Employees in \";\n            },\n          },\n        },\n      },\n    },\n    // title: {\n    //   text: \"Dubai Skills %\",\n    //   style: {\n    //     fontSize: \"14px\",\n    //     fontWeight: \"bold\",\n    //     fontFamily: \"Bukra\",\n    //     color: \"red\",\n    //   },\n    // },\n    stroke: {\n      width: 2,\n      colors: [\"#000\"],\n    },\n  });\n\n  useEffect(() => {\n    setLabel(details?.map((item) => item.category));\n    setdataSeries(details?.map((item) => item.count));\n    setOption((prevState) => ({\n      ...prevState,\n      //legend: { show: showLegend },\n      labels: details?.map((item) => item.category),\n    }));\n  }, [details]);\n\n  return (\n    <div>\n      <div\n        className=\"donut-heading\"\n        hidden={details?.length <= 0}\n        //className={multiLayer ? \"center-heading\" : \"\"}\n      >\n        {heading}\n      </div>\n      <Chart\n        options={option}\n        series={dataSeries}\n        type=\"donut\"\n        width={400}\n        //height={600}\n      />\n    </div>\n  );\n};\n\nexport default Doughnut;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,kBAAkB;AAAC;AASrC,MAAMC,QAAuC,GAAG,QAK1C;EAAA;EAAA,IAL2C;IAC/CC,OAAO;IACPC,OAAO;IACPC,UAAU;IACVC;EACF,CAAC;EACC;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAACG,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEM,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,QAAQ,CAAC,CAAC;EACzE,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAC1CG,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEM,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACI,KAAK,CAAC,CACnC;EACD,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGhB,QAAQ,CAAM;IACxCiB,KAAK,EAAE;MACLC,MAAM,EAAE,GAAG,CAAE;IACf,CAAC;;IACDC,MAAM,EAAEhB,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEM,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,QAAQ,CAAC;IAC7CS,MAAM,EAAE;MACNC,IAAI,EAAEf,UAAU;MAChBa,MAAM,EAAE;QACNG,MAAM,EAAE,MAAM;QACdC,eAAe,EAAE,KAAK;QACtBC,SAAS,EAAE,UAAUC,KAAK,SAAsB;UAAA,IAApB;YAAEC,WAAW;YAAEC;UAAE,CAAC;UAC5C,OAAOxB,OAAO,CAACgB,MAAM,CAACO,WAAW,CAAC,GAAG,IAAI,GAAGD,KAAK,GAAG,GAAG;QACzD;MACF,CAAC;MACD;MACAG,OAAO,EAAE;QACPC,CAAC,EAAE;UACDL,SAAS,EAAE,UAAUM,GAAG,EAAE;YACxB,OAAOA,GAAG,GAAG,KAAK,GAAG,KAAK;UAC5B,CAAC;UACDC,KAAK,EAAE;YACLP,SAAS,EAAE,UAAUQ,UAAU,EAAE;cAC/B,OAAO,oBAAoB;YAC7B;UACF;QACF;MACF;IACF,CAAC;IACD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAC,MAAM,EAAE;MACNC,KAAK,EAAE,CAAC;MACRZ,MAAM,EAAE,CAAC,MAAM;IACjB;EACF,CAAC,CAAC;EAEFvB,SAAS,CAAC,MAAM;IACdS,QAAQ,CAACL,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEM,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,QAAQ,CAAC,CAAC;IAC/CE,aAAa,CAACV,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEM,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACI,KAAK,CAAC,CAAC;IACjDE,SAAS,CAAEmB,SAAS,KAAM;MACxB,GAAGA,SAAS;MACZ;MACAhB,MAAM,EAAEhB,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEM,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,QAAQ;IAC9C,CAAC,CAAC,CAAC;EACL,CAAC,EAAE,CAACR,OAAO,CAAC,CAAC;EAEb,oBACE;IAAA,wBACE;MACE,SAAS,EAAC,eAAe;MACzB,MAAM,EAAE,CAAAA,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEiC,MAAM,KAAI;MAC3B;MAAA;MAAA,UAEChC;IAAO;MAAA;MAAA;MAAA;IAAA,QACJ,eACN,QAAC,KAAK;MACJ,OAAO,EAAEW,MAAO;MAChB,MAAM,EAAEH,UAAW;MACnB,IAAI,EAAC,OAAO;MACZ,KAAK,EAAE;MACP;IAAA;MAAA;MAAA;MAAA;IAAA,QACA;EAAA;IAAA;IAAA;IAAA;EAAA,QACE;AAEV,CAAC;AAAC,GAlFIV,QAAuC;AAAA,KAAvCA,QAAuC;AAoF7C,eAAeA,QAAQ;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}