{"ast":null,"code":"import _slicedToArray from\"/Users/eanas.v/Desktop/DESC-Projects/2023/DB-managmnt-app/dashboard/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect,useState}from\"react\";import{Link,useHistory,useLocation}from\"react-router-dom\";import\"./Breadcrumbs.css\";import{jsx as _jsx}from\"react/jsx-runtime\";var Breadcrumbs=function Breadcrumbs(){var location=useLocation();var history=useHistory();var _useState=useState([]),_useState2=_slicedToArray(_useState,2),breadcrumbNames=_useState2[0],setBreadcrumbNames=_useState2[1];useEffect(function(){var names=getBreadcrumbNames(location.pathname);console.log(names);setBreadcrumbNames(names);},[location]);var getBreadcrumbNames=function getBreadcrumbNames(pathname){var segments=pathname.split(\"/\").filter(function(segment){return segment!==\"\";});console.log(pathname,segments);// Return the breadcrumb names based on the segments\nif(segments.length===0){return[\"\"];}else{// Get the last segment as the current breadcrumb name\nvar lastSegment=segments[segments.length-1];return[/*#__PURE__*/_jsx(Link,{to:\"/\",children:/*#__PURE__*/_jsx(\"img\",{className:\"svg-image1\",src:require(\"../../assets/home.svg\").default,alt:\"home\",width:\"19px\",height:\"19px\"})}),lastSegment];}};// const handleListItemClick = (itemName) => {\n//   // Update the last breadcrumb name and navigate to the corresponding page\n//   const newPathname = `${location.pathname}/${itemName}`;\n//   const names = getBreadcrumbNames(newPathname);\n//   setBreadcrumbNames(names);\n//   history.push(newPathname);\n// };\nreturn/*#__PURE__*/_jsx(\"nav\",{children:/*#__PURE__*/_jsx(\"div\",{className:\"breadcrumbs-container\",children:breadcrumbNames.map(function(name,index){return/*#__PURE__*/_jsx(\"div\",{children:index!==breadcrumbNames.length-1?/*#__PURE__*/_jsx(Link,{to:\"\".concat(breadcrumbNames.slice(0,index+1).join(\"/\")),children:name}):/*#__PURE__*/_jsx(\"span\",{children:name.length!=0?\"/\"+name:\"\"})},index);})})});};export default Breadcrumbs;","map":{"version":3,"names":["React","useEffect","useState","Link","useHistory","useLocation","Breadcrumbs","location","history","breadcrumbNames","setBreadcrumbNames","names","getBreadcrumbNames","pathname","console","log","segments","split","filter","segment","length","lastSegment","require","default","map","name","index","slice","join"],"sources":["/Users/eanas.v/Desktop/DESC-Projects/2023/DB-managmnt-app/dashboard/src/components/breadcrumbs/Breadcrumbs.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\n\nimport \"./Breadcrumbs.css\";\n\nconst Breadcrumbs = () => {\n  const location = useLocation();\n  const history = useHistory();\n  const [breadcrumbNames, setBreadcrumbNames] = useState([]);\n\n  useEffect(() => {\n    const names = getBreadcrumbNames(location.pathname);\n    console.log(names);\n    setBreadcrumbNames(names);\n  }, [location]);\n\n  const getBreadcrumbNames = (pathname) => {\n    const segments = pathname.split(\"/\").filter((segment) => segment !== \"\");\n    console.log(pathname, segments);\n\n    // Return the breadcrumb names based on the segments\n    if (segments.length === 0) {\n      return [\"\"];\n    } else {\n      // Get the last segment as the current breadcrumb name\n      const lastSegment = segments[segments.length - 1];\n      return [\n        <Link to=\"/\">\n          <img\n            className=\"svg-image1\"\n            src={require(\"../../assets/home.svg\").default}\n            alt=\"home\"\n            width=\"19px\"\n            height=\"19px\"\n          />\n        </Link>,\n        lastSegment,\n      ];\n    }\n  };\n\n  // const handleListItemClick = (itemName) => {\n  //   // Update the last breadcrumb name and navigate to the corresponding page\n  //   const newPathname = `${location.pathname}/${itemName}`;\n  //   const names = getBreadcrumbNames(newPathname);\n  //   setBreadcrumbNames(names);\n  //   history.push(newPathname);\n  // };\n\n  return (\n    <nav>\n      <div className=\"breadcrumbs-container\">\n        {breadcrumbNames.map((name, index) => (\n          <div key={index}>\n            {index !== breadcrumbNames.length - 1 ? (\n              <Link to={`${breadcrumbNames.slice(0, index + 1).join(\"/\")}`}>\n                {name}\n              </Link>\n            ) : (\n              <span>{name.length != 0 ? \"/\" + name : \"\"}</span>\n            )}\n          </div>\n        ))}\n      </div>\n    </nav>\n  );\n};\n\nexport default Breadcrumbs;\n"],"mappings":"yJAAA,MAAOA,MAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,OAASC,IAAI,CAAEC,UAAU,CAAEC,WAAW,KAAQ,kBAAkB,CAEhE,MAAO,mBAAmB,CAAC,2CAE3B,GAAMC,YAAW,CAAG,QAAdA,YAAW,EAAS,CACxB,GAAMC,SAAQ,CAAGF,WAAW,EAAE,CAC9B,GAAMG,QAAO,CAAGJ,UAAU,EAAE,CAC5B,cAA8CF,QAAQ,CAAC,EAAE,CAAC,wCAAnDO,eAAe,eAAEC,kBAAkB,eAE1CT,SAAS,CAAC,UAAM,CACd,GAAMU,MAAK,CAAGC,kBAAkB,CAACL,QAAQ,CAACM,QAAQ,CAAC,CACnDC,OAAO,CAACC,GAAG,CAACJ,KAAK,CAAC,CAClBD,kBAAkB,CAACC,KAAK,CAAC,CAC3B,CAAC,CAAE,CAACJ,QAAQ,CAAC,CAAC,CAEd,GAAMK,mBAAkB,CAAG,QAArBA,mBAAkB,CAAIC,QAAQ,CAAK,CACvC,GAAMG,SAAQ,CAAGH,QAAQ,CAACI,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,CAAC,SAACC,OAAO,QAAKA,QAAO,GAAK,EAAE,GAAC,CACxEL,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAEG,QAAQ,CAAC,CAE/B;AACA,GAAIA,QAAQ,CAACI,MAAM,GAAK,CAAC,CAAE,CACzB,MAAO,CAAC,EAAE,CAAC,CACb,CAAC,IAAM,CACL;AACA,GAAMC,YAAW,CAAGL,QAAQ,CAACA,QAAQ,CAACI,MAAM,CAAG,CAAC,CAAC,CACjD,MAAO,cACL,KAAC,IAAI,EAAC,EAAE,CAAC,GAAG,uBACV,YACE,SAAS,CAAC,YAAY,CACtB,GAAG,CAAEE,OAAO,CAAC,uBAAuB,CAAC,CAACC,OAAQ,CAC9C,GAAG,CAAC,MAAM,CACV,KAAK,CAAC,MAAM,CACZ,MAAM,CAAC,MAAM,EACb,EACG,CACPF,WAAW,CACZ,CACH,CACF,CAAC,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,mBACE,kCACE,YAAK,SAAS,CAAC,uBAAuB,UACnCZ,eAAe,CAACe,GAAG,CAAC,SAACC,IAAI,CAAEC,KAAK,qBAC/B,qBACGA,KAAK,GAAKjB,eAAe,CAACW,MAAM,CAAG,CAAC,cACnC,KAAC,IAAI,EAAC,EAAE,WAAKX,eAAe,CAACkB,KAAK,CAAC,CAAC,CAAED,KAAK,CAAG,CAAC,CAAC,CAACE,IAAI,CAAC,GAAG,CAAC,CAAG,UAC1DH,IAAI,EACA,cAEP,sBAAOA,IAAI,CAACL,MAAM,EAAI,CAAC,CAAG,GAAG,CAAGK,IAAI,CAAG,EAAE,EAC1C,EAPOC,KAAK,CAQT,EACP,CAAC,EACE,EACF,CAEV,CAAC,CAED,cAAepB,YAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}