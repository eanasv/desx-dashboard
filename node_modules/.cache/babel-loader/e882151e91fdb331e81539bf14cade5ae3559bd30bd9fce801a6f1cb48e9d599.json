{"ast":null,"code":"var _jsxFileName = \"/Users/eanas.v/Desktop/DESC-Projects/2023/DB-managmnt-app/dashboard/src/components/Graph/barChart/BarChart.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Chart from \"react-apexcharts\";\nimport { getHttp } from \"../../../service/APIRequest\";\nimport \"../Chart.css\";\nimport \"./BarChartPopup.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const BarChart = _ref => {\n  _s();\n  let {\n    data,\n    xAxis,\n    title,\n    name,\n    width,\n    subTitle\n  } = _ref;\n  const [dataSeries, setdataSeries] = useState([{\n    name: title,\n    //will be displayed on the y-axis\n    data: data\n  }]);\n  const [popupPosition, setPopupPosition] = useState(null);\n  const barRef = useRef(null);\n  const [popupData, setPopupData] = useState(null);\n  const [option, setOption] = useState({\n    legend: {\n      show: false\n    },\n    chart: {\n      events: {\n        dataPointSelection: function (event, chartContext, config) {\n          // const dataPointIndex = config.dataPointIndex;\n\n          // const selectedXValue = option.xaxis.categories[dataPointIndex];\n          // const barElement = barRef.current;\n\n          // const rect = barElement.getBoundingClientRect();\n          // const popupX = rect.left + rect.width;\n          // const popupY = rect.top + rect.height / 2;\n\n          // eachBarClick(\n          //   event,\n          //   chartContext,\n          //   config,\n          //   selectedXValue,\n          //   popupX,\n          //   popupY\n          // );\n          if (event.target && event.target.classList.contains(\"apexcharts-bar\")) {\n            const barRect = event.target.getBoundingClientRect();\n            const chartContainerRect = event.currentTarget.getBoundingClientRect();\n            const clickedBarX = event.clientX - chartContainerRect.left;\n            const clickedBarY = event.clientY - chartContainerRect.top;\n            const dataPointIndex = parseInt(event.target.getAttribute(\"index\"), 10);\n            const xValue = option.xaxis.categories[dataPointIndex];\n            const yValue = option.series[0].data[dataPointIndex];\n            const dataPointIndex1 = config.dataPointIndex;\n            const selectedXValue = option.xaxis.categories[dataPointIndex1];\n            eachBarClick(event, chartContext, config, selectedXValue, clickedBarX, clickedBarY);\n          }\n        }\n      }\n    },\n    xaxis: {\n      categories: xAxis\n    },\n    title: {\n      text: title,\n      style: {\n        fontSize: \"14px\",\n        fontWeight: \"bold\",\n        fontFamily: \"Bukra\",\n        color: \"black\"\n      }\n    },\n    plotOptions: {\n      bar: {\n        columnWidth: 50,\n        colors: {\n          ranges: [{\n            from: -100,\n            to: 0,\n            color: \"#b70849\"\n          }, {\n            from: 0,\n            to: 100,\n            color: \"#1034a6\"\n          }]\n        }\n      }\n    },\n    // dataLabels: {\n    //   enabled: true,\n    //   formatter: function (val, opts) {\n    //     const isPositive = val >= 0;\n    //     return isPositive && type == \"progress\" ? `+${val}` : val.toString();\n    //   },\n    // },\n    yaxis: {\n      forceNiceScale: true,\n      labels: {\n        formatter: function (val) {\n          return Math.round(val);\n        }\n      }\n    }\n  });\n  useEffect(() => {\n    if (data) {\n      setdataSeries([{\n        name: name,\n        data: data\n      }]);\n    }\n  }, [data]);\n  useEffect(() => {\n    //setdataSeries(data);\n    //if (data) {\n    //const categories = data.map((item) => item);\n    setOption(prevState => ({\n      ...prevState,\n      title: {\n        text: title\n      },\n      xaxis: {\n        categories: xAxis\n      }\n    }));\n\n    //\n    //}\n  }, [xAxis]);\n  function eachBarClick(event, chartContext, config, value, popupX, popupY) {\n    console.log(popupX, popupY);\n    const response = getHttp(\"employeeByEntityAndSubcat\", {\n      entity: value,\n      subcat: subTitle\n    }).then(response => {\n      setPopupData(response);\n      setPopupPosition({\n        popupX: popupX,\n        popupY: popupY\n      });\n    }).catch(error => {\n      console.log(error);\n      // handle error\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bar-chart\",\n    onClick: () => setPopupData(null),\n    children: [/*#__PURE__*/_jsxDEV(Chart, {\n      options: option,\n      series: dataSeries,\n      type: \"bar\",\n      height: 350,\n      width: width ? 550 : \"100%\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), popupData && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"popup\",\n      style: {\n        left: popupPosition.popupX,\n        top: popupPosition.popupY\n      },\n      children: [popupData.map((data, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [data.name, \"- \", data.job]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"popup-arrow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: barRef,\n      style: {\n        display: \"none\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 5\n  }, this);\n};\n_s(BarChart, \"eRbGK7R9r6fnLYrVl9v2saFgdHw=\");\n_c = BarChart;\nvar _c;\n$RefreshReg$(_c, \"BarChart\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Chart","getHttp","BarChart","data","xAxis","title","name","width","subTitle","dataSeries","setdataSeries","popupPosition","setPopupPosition","barRef","popupData","setPopupData","option","setOption","legend","show","chart","events","dataPointSelection","event","chartContext","config","target","classList","contains","barRect","getBoundingClientRect","chartContainerRect","currentTarget","clickedBarX","clientX","left","clickedBarY","clientY","top","dataPointIndex","parseInt","getAttribute","xValue","xaxis","categories","yValue","series","dataPointIndex1","selectedXValue","eachBarClick","text","style","fontSize","fontWeight","fontFamily","color","plotOptions","bar","columnWidth","colors","ranges","from","to","yaxis","forceNiceScale","labels","formatter","val","Math","round","prevState","value","popupX","popupY","console","log","response","entity","subcat","then","catch","error","map","index","job","display"],"sources":["/Users/eanas.v/Desktop/DESC-Projects/2023/DB-managmnt-app/dashboard/src/components/Graph/barChart/BarChart.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport Chart from \"react-apexcharts\";\nimport { getHttp } from \"../../../service/APIRequest\";\nimport \"../Chart.css\";\nimport \"./BarChartPopup.css\";\n\ninterface BarChartInterface {\n  data;\n  xAxis;\n  title;\n  name?;\n  width?: any;\n  subTitle?: String;\n}\n\nexport const BarChart: React.FC<BarChartInterface> = ({\n  data,\n  xAxis,\n  title,\n  name,\n  width,\n  subTitle,\n}) => {\n  const [dataSeries, setdataSeries] = useState<any>([\n    {\n      name: title, //will be displayed on the y-axis\n      data: data,\n    },\n  ]);\n  const [popupPosition, setPopupPosition] = useState(null);\n  const barRef = useRef(null);\n  const [popupData, setPopupData] = useState(null);\n  const [option, setOption] = useState<any>({\n    legend: {\n      show: false,\n    },\n    chart: {\n      events: {\n        dataPointSelection: function (event, chartContext, config) {\n          // const dataPointIndex = config.dataPointIndex;\n\n          // const selectedXValue = option.xaxis.categories[dataPointIndex];\n          // const barElement = barRef.current;\n\n          // const rect = barElement.getBoundingClientRect();\n          // const popupX = rect.left + rect.width;\n          // const popupY = rect.top + rect.height / 2;\n\n          // eachBarClick(\n          //   event,\n          //   chartContext,\n          //   config,\n          //   selectedXValue,\n          //   popupX,\n          //   popupY\n          // );\n          if (\n            event.target &&\n            event.target.classList.contains(\"apexcharts-bar\")\n          ) {\n            const barRect = event.target.getBoundingClientRect();\n            const chartContainerRect =\n              event.currentTarget.getBoundingClientRect();\n\n            const clickedBarX = event.clientX - chartContainerRect.left;\n            const clickedBarY = event.clientY - chartContainerRect.top;\n\n            const dataPointIndex = parseInt(\n              event.target.getAttribute(\"index\"),\n              10\n            );\n            const xValue = option.xaxis.categories[dataPointIndex];\n            const yValue = option.series[0].data[dataPointIndex];\n            const dataPointIndex1 = config.dataPointIndex;\n\n            const selectedXValue = option.xaxis.categories[dataPointIndex1];\n\n            eachBarClick(\n              event,\n              chartContext,\n              config,\n              selectedXValue,\n              clickedBarX,\n              clickedBarY\n            );\n          }\n        },\n      },\n    },\n    xaxis: {\n      categories: xAxis,\n    },\n    title: {\n      text: title,\n      style: {\n        fontSize: \"14px\",\n        fontWeight: \"bold\",\n        fontFamily: \"Bukra\",\n        color: \"black\",\n      },\n    },\n    plotOptions: {\n      bar: {\n        columnWidth: 50,\n        colors: {\n          ranges: [\n            {\n              from: -100,\n              to: 0,\n              color: \"#b70849\",\n            },\n            {\n              from: 0,\n              to: 100,\n              color: \"#1034a6\",\n            },\n          ],\n        },\n      },\n    },\n    // dataLabels: {\n    //   enabled: true,\n    //   formatter: function (val, opts) {\n    //     const isPositive = val >= 0;\n    //     return isPositive && type == \"progress\" ? `+${val}` : val.toString();\n    //   },\n    // },\n    yaxis: {\n      forceNiceScale: true,\n      labels: {\n        formatter: function (val) {\n          return Math.round(val);\n        },\n      },\n    },\n  });\n\n  useEffect(() => {\n    if (data) {\n      setdataSeries([\n        {\n          name: name,\n          data: data,\n        },\n      ]);\n    }\n  }, [data]);\n\n  useEffect(() => {\n    //setdataSeries(data);\n    //if (data) {\n    //const categories = data.map((item) => item);\n    setOption((prevState) => ({\n      ...prevState,\n      title: {\n        text: title,\n      },\n      xaxis: {\n        categories: xAxis,\n      },\n    }));\n\n    //\n    //}\n  }, [xAxis]);\n\n  function eachBarClick(event, chartContext, config, value, popupX, popupY) {\n    console.log(popupX, popupY);\n    const response = getHttp(\"employeeByEntityAndSubcat\", {\n      entity: value,\n      subcat: subTitle,\n    })\n      .then((response) => {\n        setPopupData(response);\n        setPopupPosition({ popupX: popupX, popupY: popupY });\n      })\n      .catch((error) => {\n        console.log(error);\n        // handle error\n      });\n  }\n\n  return (\n    <div className=\"bar-chart\" onClick={() => setPopupData(null)}>\n      <Chart\n        options={option}\n        series={dataSeries}\n        type=\"bar\"\n        height={350}\n        width={width ? 550 : \"100%\"}\n      />\n      {popupData && (\n        <div\n          className=\"popup\"\n          style={{ left: popupPosition.popupX, top: popupPosition.popupY }}\n        >\n          {popupData.map((data, index) => (\n            <p key={index}>\n              {data.name}- {data.job}\n            </p>\n          ))}\n          <div className=\"popup-arrow\"></div>\n        </div>\n      )}\n      <div ref={barRef} style={{ display: \"none\" }}></div>\n    </div>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}